"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[1951],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=o,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||a;return t?r.createElement(g,i(i({ref:n},m),{},{components:t})):r.createElement(g,i({ref:n},m))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4282:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var r=t(7462),o=(t(7294),t(3905));const a={},i="Job Level Preemption",l={unversionedId:"user-manuals/job-level-preemption",id:"user-manuals/job-level-preemption",title:"Job Level Preemption",description:"Introduction",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/user-manuals/job-level-preemption.md",sourceDirName:"user-manuals",slug:"/user-manuals/job-level-preemption",permalink:"/zh-Hans/docs/next/user-manuals/job-level-preemption",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/user-manuals/job-level-preemption.md",tags:[],version:"current",lastUpdatedBy:"\u4e54\u666e",lastUpdatedAt:1760530428,formattedLastUpdatedAt:"2025\u5e7410\u670815\u65e5",frontMatter:{},sidebar:"docs",previous:{title:"GangScheduling",permalink:"/zh-Hans/docs/next/user-manuals/gang-scheduling"},next:{title:"Capacity Scheduling - Elastic Quota Management",permalink:"/zh-Hans/docs/next/user-manuals/capacity-scheduling"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Verify Preemption is Enabled",id:"verify-preemption-is-enabled",level:2},{value:"Check Scheduler Configuration",id:"check-scheduler-configuration",level:3},{value:"Usage Example",id:"usage-example",level:2},{value:"Environment Setup",id:"environment-setup",level:3},{value:"Define PriorityClasses",id:"define-priorityclasses",level:3},{value:"Deploy Low-Priority Pods to Consume Resources",id:"deploy-low-priority-pods-to-consume-resources",level:3},{value:"Create a High-Priority Gang Job to Trigger Preemption",id:"create-a-high-priority-gang-job-to-trigger-preemption",level:3},{value:"Verify Preemption Outcome",id:"verify-preemption-outcome",level:3}],m={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"job-level-preemption"},"Job Level Preemption"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"In large-scale cluster environments, high-priority jobs (e.g., critical AI training tasks) often need to preempt resources from lower-priority workloads when sufficient resources are not available. However, traditional ",(0,o.kt)("strong",{parentName:"p"},"pod-level preemption")," in Kubernetes cannot guarantee that all member pods of a distributed job will seize resources together, leading to invalid preemption."),(0,o.kt)("p",null,"To solve this, Koordinator provides ",(0,o.kt)("strong",{parentName:"p"},"job-level preemption"),", which ensures that:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Preemption is triggered at the job (GangGroup) level."),(0,o.kt)("li",{parentName:"ul"},"Only when all member pods can be co-scheduled after eviction will preemption occur."),(0,o.kt)("li",{parentName:"ul"},"Resources are reserved via ",(0,o.kt)("inlineCode",{parentName:"li"},"nominatedNode")," for all members to maintain scheduling consistency.")),(0,o.kt)("p",null,"This capability works seamlessly with ",(0,o.kt)("a",{parentName:"p",href:"https://koordinator.sh/docs/next/architecture/job/"},"PodGroup/GangGroup")," semantics."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Kubernetes >= 1.18"),(0,o.kt)("li",{parentName:"ul"},"Koordinator >= 1.7.0")),(0,o.kt)("h2",{id:"verify-preemption-is-enabled"},"Verify Preemption is Enabled"),(0,o.kt)("p",null,"Although job-level preemption is ",(0,o.kt)("strong",{parentName:"p"},"enabled by default")," as of koordinator \u2265 1.7.0, it's recommended to confirm the Coscheduling plugin configuration."),(0,o.kt)("h3",{id:"check-scheduler-configuration"},"Check Scheduler Configuration"),(0,o.kt)("p",null,"Retrieve the current ",(0,o.kt)("inlineCode",{parentName:"p"},"koord-scheduler-config"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl -n koordinator-system get cm koord-scheduler-config -o yaml\n")),(0,o.kt)("p",null,"Ensure the Coscheduling plugin has ",(0,o.kt)("inlineCode",{parentName:"p"},"enablePreemption: true"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"pluginConfig:\n  - name: Coscheduling\n    args:\n      apiVersion: kubescheduler.config.k8s.io/v1\n      kind: CoschedulingArgs\n      enablePreemption: true\n")),(0,o.kt)("p",null,"If changes are made, restart the koord-scheduler pod to apply them."),(0,o.kt)("h2",{id:"usage-example"},"Usage Example"),(0,o.kt)("h3",{id:"environment-setup"},"Environment Setup"),(0,o.kt)("p",null,"To demonstrate job-level preemption, we will simulate a resource-constrained environment and trigger preemption from a high-priority job. Assume the cluster has 2 worker nodes, each with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"CPU: 4 cores"),(0,o.kt)("li",{parentName:"ul"},"Memory: 16 GiB"),(0,o.kt)("li",{parentName:"ul"},"No other running workloads initially")),(0,o.kt)("p",null,"Our procedure is:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Fill both nodes with low-priority pods consuming all CPU."),(0,o.kt)("li",{parentName:"ol"},"Submit a high-priority gang job that cannot fit."),(0,o.kt)("li",{parentName:"ol"},"Observe how Koordinator evicts low-priority pods to make space.")),(0,o.kt)("h3",{id:"define-priorityclasses"},"Define PriorityClasses"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You must define priority classes to enable preemption logic.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# High-Priority Class (for preemptors)\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: high-priority\nvalue: 1000000\npreemptionPolicy: PreemptLowerPriority\ndescription: "Used for critical AI training jobs that can preempt others."\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# Low-Priority Class (for victims)\napiVersion: scheduling.k8s.io/v1\nkind: PriorityClass\nmetadata:\n  name: low-priority\nvalue: 1000\npreemptionPolicy: PreemptLowerPriority\nglobalDefault: false\ndescription: "Used for non-critical jobs that can be preempted."\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Apply them")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f priorityclasses.yaml\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Verify")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get priorityclass\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"NAME              VALUE        GLOBAL-DEFAULT   AGE\nhigh-priority     1000000      false            1m\nlow-priority      1000         false            1m\n")),(0,o.kt)("h3",{id:"deploy-low-priority-pods-to-consume-resources"},"Deploy Low-Priority Pods to Consume Resources"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create 2 low-priority pods (1 per node), each requesting 4 CPU cores \u2192 fully occupying both nodes.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: lp-pod-1\n  namespace: default\nspec:\n  schedulerName: koord-scheduler\n  priorityClassName: low-priority\n  containers:\n  - command:\n    - sleep\n    - 365d\n    image: busybox\n    imagePullPolicy: IfNotPresent\n    name: curlimage\n    resources:\n      limits:\n        cpu: 4\n        memory: 40Mi\n      requests:\n        cpu: 4\n        memory: 40Mi\n    terminationMessagePath: /dev/termination-log\n    terminationMessagePolicy: File\n  restartPolicy: Always\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: lp-pod-2\n  namespace: default\nspec:\n  schedulerName: koord-scheduler\n  priorityClassName: low-priority\n  containers:\n  - command:\n    - sleep\n    - 365d\n    image: busybox\n    imagePullPolicy: IfNotPresent\n    name: curlimage\n    resources:\n      limits:\n        cpu: 4\n        memory: 40Mi\n      requests:\n        cpu: 4\n        memory: 40Mi\n    terminationMessagePath: /dev/termination-log\n    terminationMessagePolicy: File\n  restartPolicy: Always\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Apply them")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f low-priority-pods.yaml\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Check")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -o wide\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME        READY   STATUS    RESTARTS   AGE     IP            NODE.          NOMINATED NODE   READINESS GATES\nlp-pod-1    1/1     Running   0          2m      10.244.1.10   cn-beijing.1   <none>           <none>\nlp-pod-2    1/1     Running   0          2m      10.244.1.11   cn-beijing.2   <none>           <none>\n")),(0,o.kt)("p",null,"At this point, no CPU remains available on either node."),(0,o.kt)("h3",{id:"create-a-high-priority-gang-job-to-trigger-preemption"},"Create a High-Priority Gang Job to Trigger Preemption"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Now submit a 2-pod high-priority job that requires 3 CPU per pod \u2014 total demand exceeds current capacity.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: hp-training-job\n  namespace: default\nspec:\n  minMember: 2\n  scheduleTimeoutSeconds: 300\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: hp-worker-1\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: hp-training-job\nspec:\n  schedulerName: koord-scheduler\n  priorityClassName: high-priority\n  preemptionPolicy: PreemptLowerPriority\n  containers:\n  - command:\n    - sleep\n    - 365d\n    image: busybox\n    imagePullPolicy: IfNotPresent\n    name: curlimage\n    resources:\n      limits:\n        cpu: 3\n        memory: 40Mi\n      requests:\n        cpu: 3\n        memory: 40Mi\n    terminationMessagePath: /dev/termination-log\n    terminationMessagePolicy: File\n  restartPolicy: Always\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: hp-worker-2\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: hp-training-job\nspec:  \n  schedulerName: koord-scheduler\n  priorityClassName: high-priority\n  preemptionPolicy: PreemptLowerPriority\n  containers:\n  - command:\n    - sleep\n    - 365d\n    image: busybox\n    imagePullPolicy: IfNotPresent\n    name: curlimage\n    resources:\n      limits:\n        cpu: 3\n        memory: 40Mi\n      requests:\n        cpu: 3\n        memory: 40Mi\n    terminationMessagePath: /dev/termination-log\n    terminationMessagePolicy: File\n  restartPolicy: Always\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Apply them")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f high-priority-job.yaml\n")),(0,o.kt)("p",null,"After a few seconds, Koordinator will evict one pod per node to free up resources."),(0,o.kt)("h3",{id:"verify-preemption-outcome"},"Verify Preemption Outcome"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Check Victim Pods Were Evicted")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -o wide\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"NAME           READY   STATUS        RESTARTS   AGE     IP            NODE           NOMINATED NODE   READINESS GATES\nhp-worker-1    0/1     Pending       0          90s     <none>        <none>         cn-beijing.1     <none>\nhp-worker-2    0/1     Pending       0          90s     <none>        <none>         cn-beijing.2     <none>\nlp-pod-1       0/1     Terminating   0          5m      10.244.1.10   cn-beijing.1   <none>           <none>\nlp-pod-2       1/1     Terminating   0          5m      10.244.1.11   cn-beijing.2   <none>           <none>\n")),(0,o.kt)("p",null,"Pods lp-pod-1 and lp-pod-2 are being terminated to make room and high-priority pods are nominated.\n2.  Inspect one victim:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pod lp-pod-1 -o yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'status:\n  conditions:\n    - type: DisruptionTarget\n      status: "True"\n      lastTransitionTime: "2025-10-12T11:23:45Z"\n      reason: PreemptionByScheduler\n      message: >-\n        koord-scheduler: preempting to accommodate higher priority pods, preemptor:\n        default/hp-training-job, triggerpod: default/hp-worker-1\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Confirm Binding After Termination")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pods -o wide\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"NAME           READY   STATUS    RESTARTS   AGE     IP            NODE           NOMINATED NODE   READINESS GATES\nhp-worker-1    1/1     Running   0          3m      10.244.1.14   cn-beijing.1   <none>           <none>\nhp-worker-2    1/1     Running   0          3m      10.244.2.15   cn-beijing.2   <none>           <none>\n")))}c.isMDXComponent=!0}}]);