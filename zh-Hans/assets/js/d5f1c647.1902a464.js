"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[9096],{3905:(e,n,o)=>{o.d(n,{Zo:()=>s,kt:()=>k});var a=o(67294);function t(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function r(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,a)}return o}function l(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?r(Object(o),!0).forEach((function(n){t(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function p(e,n){if(null==e)return{};var o,a,t=function(e,n){if(null==e)return{};var o,a,t={},r=Object.keys(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||(t[o]=e[o]);return t}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)o=r[a],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(t[o]=e[o])}return t}var i=a.createContext({}),d=function(e){var n=a.useContext(i),o=n;return e&&(o="function"==typeof e?e(n):l(l({},n),e)),o},s=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},g="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var o=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),g=d(o),u=t,k=g["".concat(i,".").concat(u)]||g[u]||m[u]||r;return o?a.createElement(k,l(l({ref:n},s),{},{components:o})):a.createElement(k,l({ref:n},s))}));function k(e,n){var o=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var r=o.length,l=new Array(r);l[0]=u;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[g]="string"==typeof e?e:t,l[1]=p;for(var d=2;d<r;d++)l[d]=o[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,o)}u.displayName="MDXCreateElement"},99687:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>d});var a=o(87462),t=(o(67294),o(3905));const r={},l="Job",p={unversionedId:"architecture/job",id:"version-v1.7/architecture/job",title:"Job",description:"Job \u8c03\u5ea6",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/version-v1.7/architecture/job.md",sourceDirName:"architecture",slug:"/architecture/job",permalink:"/zh-Hans/docs/architecture/job",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/architecture/job.md",tags:[],version:"v1.7",lastUpdatedBy:"\u4e54\u666e",lastUpdatedAt:1761882390,formattedLastUpdatedAt:"2025\u5e7410\u670831\u65e5",frontMatter:{},sidebar:"docs",previous:{title:"QoS",permalink:"/zh-Hans/docs/architecture/qos"},next:{title:"Device",permalink:"/zh-Hans/docs/architecture/device"}},i={},d=[{value:"Job \u8c03\u5ea6",id:"job-\u8c03\u5ea6",level:2},{value:"PodGroup",id:"podgroup",level:3},{value:"GangGroup",id:"ganggroup",level:3},{value:"Job \u7ea7\u522b\u62a2\u5360",id:"job-\u7ea7\u522b\u62a2\u5360",level:2},{value:"\u62a2\u5360\u7b97\u6cd5",id:"\u62a2\u5360\u7b97\u6cd5",level:3},{value:"\u53d7\u5bb3\u8005\u7684\u62a2\u5360\u539f\u56e0",id:"\u53d7\u5bb3\u8005\u7684\u62a2\u5360\u539f\u56e0",level:3},{value:"\u62a2\u5360\u8005\u7684\u63d0\u540d\u8282\u70b9",id:"\u62a2\u5360\u8005\u7684\u63d0\u540d\u8282\u70b9",level:3},{value:"\u7f51\u7edc\u62d3\u6251\u611f\u77e5",id:"\u7f51\u7edc\u62d3\u6251\u611f\u77e5",level:2},{value:"\u62d3\u6251\u611f\u77e5\u8c03\u5ea6\u9700\u6c42",id:"\u62d3\u6251\u611f\u77e5\u8c03\u5ea6\u9700\u6c42",level:3},{value:"\u96c6\u7fa4\u7f51\u7edc\u62d3\u6251",id:"\u96c6\u7fa4\u7f51\u7edc\u62d3\u6251",level:3},{value:"\u7f51\u7edc\u62d3\u6251\u7b56\u7565",id:"\u7f51\u7edc\u62d3\u6251\u7b56\u7565",level:3},{value:"\u7f51\u7edc\u62d3\u6251 Pod \u7d22\u5f15",id:"\u7f51\u7edc\u62d3\u6251-pod-\u7d22\u5f15",level:3},{value:"\u62d3\u6251\u805a\u96c6\u7b97\u6cd5",id:"\u62d3\u6251\u805a\u96c6\u7b97\u6cd5",level:3},{value:"\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1a",id:"\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48",level:2}],s={toc:d},g="wrapper";function m(e){let{components:n,...r}=e;return(0,t.kt)(g,(0,a.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"job"},"Job"),(0,t.kt)("h2",{id:"job-\u8c03\u5ea6"},"Job \u8c03\u5ea6"),(0,t.kt)("p",null,"\u5fc5\u987b\u4e00\u8d77\u8c03\u5ea6\u7684\u4e00\u6279 Pod \u79f0\u4e3a ",(0,t.kt)("inlineCode",{parentName:"p"},"Job"),"\u3002"),(0,t.kt)("h3",{id:"podgroup"},"PodGroup"),(0,t.kt)("p",null,"\u6709\u65f6\uff0c\u8fd9\u6279 Pod \u662f\u5b8c\u5168\u540c\u8d28\u7684\uff0c\u53ea\u9700\u8981\u7d2f\u79ef\u5230\u6307\u5b9a\u7684\u6700\u5c0f\u6570\u91cf\u5373\u53ef\u6210\u529f\u8c03\u5ea6\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5355\u72ec\u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodGroup")," \u63cf\u8ff0 ",(0,t.kt)("inlineCode",{parentName:"p"},"minMember"),"\uff0c\u7136\u540e\u901a\u8fc7 Pod Label \u5173\u8054\u5176 ",(0,t.kt)("inlineCode",{parentName:"p"},"member")," Pod\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6700\u5c0f\u7d2f\u79ef\u6570\u91cf\u4e3a 2 \u7684 PodGroup \u53ca\u5176 ",(0,t.kt)("inlineCode",{parentName:"p"},"member")," Pod\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-example\n  namespace: default\nspec:\n  minMember: 2\n")),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: pod\nmetadata:\n  name: pod-example1\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: gang-example\nspec:\n  schedulerName: koord-scheduler\n  ...\n---\napiVersion: v1\nkind: pod\nmetadata:\n  name: pod-example2\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: gang-example\nspec:\n  schedulerName: koord-scheduler\n  ...\n")),(0,t.kt)("h3",{id:"ganggroup"},"GangGroup"),(0,t.kt)("p",null,"\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u4e00\u8d77\u8c03\u5ea6\u7684 Pod \u53ef\u80fd\u4e0d\u662f\u540c\u8d28\u7684\uff0c\u5fc5\u987b\u5206\u522b\u5b8c\u6210\u6700\u5c0f\u6570\u91cf\u7684\u7d2f\u79ef\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cKoordinator \u652f\u6301\u901a\u8fc7 PodGroup Label \u5173\u8054\u4e0d\u540c\u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodGroup")," \u4ee5\u5f62\u6210 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup"),"\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5305\u542b\u4e24\u4e2a PodGroup \u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup"),"\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-example1\n  namespace: default\n  annotations:\n    gang.scheduling.koordinator.sh/groups: "[\\"default/gang-example1\\", \\"default/gang-example2\\"]"\nspec:\n  minMember: 1\n---\napiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-example2\n  namespace: default\n  annotations:\n    gang.scheduling.koordinator.sh/groups: "[\\"default/gang-example1\\", \\"default/gang-example2\\"]"\nspec:\n  minMember: 2\n')),(0,t.kt)("h2",{id:"job-\u7ea7\u522b\u62a2\u5360"},"Job \u7ea7\u522b\u62a2\u5360"),(0,t.kt)("p",null,"\u5f53 Pod \u7531\u4e8e\u8d44\u6e90\u4e0d\u8db3\u800c\u65e0\u6cd5\u8c03\u5ea6\u65f6\uff0cKube-Scheduler \u4f1a\u5c1d\u8bd5\u9a71\u9010\u4f4e\u4f18\u5148\u7ea7 Pod \u4ee5\u4e3a\u5176\u817e\u51fa\u7a7a\u95f4\u3002\u8fd9\u662f\u4f20\u7edf\u7684 ",(0,t.kt)("strong",{parentName:"p"},"Pod \u7ea7\u522b\u62a2\u5360"),"\u3002\u7136\u800c\uff0c\u5f53 Job \u7531\u4e8e\u8d44\u6e90\u4e0d\u8db3\u800c\u65e0\u6cd5\u8c03\u5ea6\u65f6\uff0c\u8c03\u5ea6\u5668\u5fc5\u987b",(0,t.kt)("strong",{parentName:"p"},"\u4e3a\u6574\u4e2a Job \u7684\u8c03\u5ea6\u817e\u51fa\u8db3\u591f\u7684\u7a7a\u95f4"),"\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u62a2\u5360\u79f0\u4e3a ",(0,t.kt)("strong",{parentName:"p"},"Job \u7ea7\u522b\u62a2\u5360"),"\u3002"),(0,t.kt)("h3",{id:"\u62a2\u5360\u7b97\u6cd5"},"\u62a2\u5360\u7b97\u6cd5"),(0,t.kt)("p",null,"\u53d1\u8d77\u62a2\u5360\u7684\u4f5c\u4e1a\u79f0\u4e3a ",(0,t.kt)("inlineCode",{parentName:"p"},"\u62a2\u5360\u8005(preemptor)"),"\uff0c\u88ab\u62a2\u5360\u7684 Pod \u79f0\u4e3a ",(0,t.kt)("inlineCode",{parentName:"p"},"\u53d7\u5bb3\u8005(victim)"),"\u3002Job \u7ea7\u522b\u62a2\u5360\u7684\u6574\u4f53\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},"\u4e0d\u53ef\u8c03\u5ea6\u7684 Pod \u2192 \u8fdb\u5165 PostFilter \u9636\u6bb5"),(0,t.kt)("li",{parentName:"ol"},"\u662f\u5426\u662f Job\uff1f \u2192 \u662f \u2192 \u83b7\u53d6\u6240\u6709\u6210\u5458 Pod"),(0,t.kt)("li",{parentName:"ol"},"\u68c0\u67e5 Job \u62a2\u5360\u8d44\u683c\uff1a",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"pods.spec.preemptionPolicy")," \u2260 Never"),(0,t.kt)("li",{parentName:"ul"},"\u6240\u6709\u6210\u5458 Pod \u5f53\u524d\u63d0\u540d\u7684\u8282\u70b9\u4e0a\u6ca1\u6709\u6b63\u5728\u7ec8\u6b62\u7684\u53d7\u5bb3\u8005\uff08\u9632\u6b62\u5197\u4f59\u62a2\u5360\uff09"))),(0,t.kt)("li",{parentName:"ol"},"\u67e5\u627e\u62a2\u5360\u53ef\u80fd\u6709\u5e2e\u52a9\u7684\u5019\u9009\u8282\u70b9"),(0,t.kt)("li",{parentName:"ol"},"\u6267\u884c\u9884\u6f14\u4ee5\u6a21\u62df\u5220\u9664\u6f5c\u5728\u53d7\u5bb3\u8005\uff08\u4f4e\u4f18\u5148\u7ea7 Pod\uff09"),(0,t.kt)("li",{parentName:"ol"},"\u9009\u62e9\u6700\u4f18\u8282\u70b9 + \u6700\u5c0f\u6210\u672c\u53d7\u5bb3\u8005\u96c6\uff08",(0,t.kt)("strong",{parentName:"li"},"\u4f5c\u4e1a\u611f\u77e5\u6210\u672c\u6a21\u578b"),"\uff09"),(0,t.kt)("li",{parentName:"ol"},"\u6267\u884c\u62a2\u5360\uff1a",(0,t.kt)("ul",{parentName:"li"},(0,t.kt)("li",{parentName:"ul"},"\u5220\u9664\u53d7\u5bb3\u8005\uff08\u901a\u8fc7\u8bbe\u7f6e DisruptionTarget \u6761\u4ef6\u5e76\u8c03\u7528\u5220\u9664 API\uff09"),(0,t.kt)("li",{parentName:"ul"},"\u6e05\u9664\u76ee\u6807\u8282\u70b9\u4e0a\u5176\u4ed6\u4f4e\u4f18\u5148\u7ea7\u63d0\u540d Pod \u7684 ",(0,t.kt)("inlineCode",{parentName:"li"},"status.nominatedNode"),"\u3002"),(0,t.kt)("li",{parentName:"ul"},"\u4e3a\u6240\u6709\u6210\u5458 Pod \u8bbe\u7f6e ",(0,t.kt)("inlineCode",{parentName:"li"},"status.nominatedNode"),"\u3002"))),(0,t.kt)("li",{parentName:"ol"},"\u62a2\u5360\u6210\u529f \u2192 Pod \u8fdb\u5165\u8c03\u5ea6\u961f\u5217\uff0c\u7b49\u5f85\u53d7\u5bb3\u8005\u7ec8\u6b62\u3002")),(0,t.kt)("h3",{id:"\u53d7\u5bb3\u8005\u7684\u62a2\u5360\u539f\u56e0"},"\u53d7\u5bb3\u8005\u7684\u62a2\u5360\u539f\u56e0"),(0,t.kt)("p",null,"\u5f53\u53d7\u5bb3\u8005\u88ab\u62a2\u5360\u65f6,Koord-Scheduler \u4f1a\u5728 ",(0,t.kt)("inlineCode",{parentName:"p"},"victim.status.conditions")," \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee,\u4ee5\u6307\u793a\u54ea\u4e2a\u4f5c\u4e1a\u62a2\u5360\u4e86\u5b83\u5e76\u89e6\u53d1\u4f18\u96c5\u7ec8\u6b62\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: pod\nmetadata:\n  name: victim-1\n  namespace: default\nstatus:\n  conditions:\n  - lastProbeTime: null\n    lastTransitionTime: "2025-09-17T08:41:35Z"\n    message: \'koord-scheduler: preempting to accommodate higher priority pods, preemptor:\n      default/hello-job, triggerpod: default/preemptor-pod-2\'\n    reason: PreemptionByScheduler\n    status: "True"\n    type: DisruptionTarget\n')),(0,t.kt)("p",null,"\u4e0a\u9762\u663e\u793a default/victim-1 \u88ab\u9ad8\u4f18\u5148\u7ea7\u4f5c\u4e1a ",(0,t.kt)("inlineCode",{parentName:"p"},"hello-job")," \u62a2\u5360\u3002\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u68c0\u7d22 ",(0,t.kt)("inlineCode",{parentName:"p"},"hello-job")," \u7684\u6210\u5458 Pod\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get po -n default -l pod-group.scheduling.sigs.k8s.io=hello-job\nhello-job-pod-1   0/1     Pending             0                5m\nhello-job-pod-2   0/1     Pending             0                5m\n")),(0,t.kt)("h3",{id:"\u62a2\u5360\u8005\u7684\u63d0\u540d\u8282\u70b9"},"\u62a2\u5360\u8005\u7684\u63d0\u540d\u8282\u70b9"),(0,t.kt)("p",null,"Job \u62a2\u5360\u6210\u529f\u540e,\u9664\u4e86\u9a71\u9010\u53d7\u5bb3 Pod \u5916,\u8c03\u5ea6\u5668\u8fd8\u5fc5\u987b\u5728\u5176\u5185\u90e8\u7f13\u5b58\u4e2d\u9884\u7559\u56de\u6536\u7684\u8d44\u6e90\u3002\u5728 Kubernetes \u4e2d,\u8fd9\u662f\u4f7f\u7528 ",(0,t.kt)("inlineCode",{parentName:"p"},"pod.status.nominatedNode")," \u5b9e\u73b0\u7684\u3002\u5728 Koordinator \u4e2d,koord-scheduler \u4e3a",(0,t.kt)("strong",{parentName:"p"},"\u62a2\u5360\u4f5c\u4e1a\u7684\u6240\u6709\u6210\u5458 Pod")," \u8bbe\u7f6e ",(0,t.kt)("inlineCode",{parentName:"p"},".status.nominatedNode")," \u5b57\u6bb5\u4ee5\u53cd\u6620\u6b64\u8d44\u6e90\u9884\u7559\u3002"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: pod\nmetadata:\nname: preemptor-pod-1\nnamespace: default\nlabels:\n  pod-group.scheduling.sigs.k8s.io: hello-job\nstatus:\n  nominatednodeName: example-node\n  phase: Pending\n---\napiVersion: v1\nkind: pod\nmetadata:\n  name: preemptor-pod-2\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: hello-job\nstatus:\n  nominatednodeName: example-node\n  phase: Pending\n")),(0,t.kt)("p",null,"\u4e0a\u9762\u663e\u793a ",(0,t.kt)("inlineCode",{parentName:"p"},"hello-job")," \u7684\u4e24\u4e2a Pod \u5df2\u6210\u529f\u5b8c\u6210\u62a2\u5360,\u5e76\u88ab\u63d0\u540d\u8c03\u5ea6\u5230 example-node\u3002"),(0,t.kt)("h2",{id:"\u7f51\u7edc\u62d3\u6251\u611f\u77e5"},"\u7f51\u7edc\u62d3\u6251\u611f\u77e5"),(0,t.kt)("p",null,"\u5728\u5927\u89c4\u6a21 AI \u8bad\u7ec3\u573a\u666f\u4e2d\uff0c\u5c24\u5176\u662f\u5927\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u8bad\u7ec3\uff0c\u9ad8\u6548\u7684 Pod \u95f4\u901a\u4fe1\u5bf9\u8bad\u7ec3\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002\u6a21\u578b\u5e76\u884c\u6280\u672f\uff0c\u5982\u5f20\u91cf\u5e76\u884c\uff08TP\uff09\u3001\u6d41\u6c34\u7ebf\u5e76\u884c\uff08PP\uff09\u548c\u6570\u636e\u5e76\u884c\uff08DP\uff09\uff0c\u9700\u8981\u5728 GPU \u4e4b\u95f4\u8fdb\u884c\u9891\u7e41\u7684\u9ad8\u5e26\u5bbd\u6570\u636e\u4ea4\u6362\u2014\u2014\u901a\u5e38\u8de8\u8d8a\u591a\u4e2a\u8282\u70b9\u3002\u5728\u8fd9\u4e9b\u5de5\u4f5c\u8d1f\u8f7d\u4e0b\uff0c\u7f51\u7edc\u62d3\u6251\u6210\u4e3a\u5173\u952e\u7684\u6027\u80fd\u74f6\u9888\uff0c\u901a\u4fe1\u5ef6\u8fdf\u548c\u5e26\u5bbd\u53d7\u7269\u7406",(0,t.kt)("a",{parentName:"p",href:"https://github.com/koordinator-sh/koordinator/blob/main/docs/proposals/scheduling/20250611-networktopology-aware-scheduling.md#network-architecture"},"\u7f51\u7edc\u5c42\u6b21\u7ed3\u6784"),"\uff08\u5982 NVLink\u3001block\u3001spine\uff09\u7684\u4e25\u91cd\u5f71\u54cd\u3002"),(0,t.kt)("p",null,(0,t.kt)("img",{alt:"image",src:o(12574).Z,width:"2830",height:"978"})),(0,t.kt)("p",null,"\u4e3a\u4e86\u4f18\u5316\u8bad\u7ec3\u6548\u7387\uff0c",(0,t.kt)("strong",{parentName:"p"},(0,t.kt)("inlineCode",{parentName:"strong"},"GangGroup")," \u4e2d\u7684 Pod \u88ab\u8981\u6c42\u6216\u4f18\u5148\u8c03\u5ea6\u5230\u4f4d\u4e8e\u76f8\u540c\u6216\u9644\u8fd1\u9ad8\u6027\u80fd\u7f51\u7edc\u57df\u7684\u8282\u70b9\u4e0a"),"\uff0c\u6700\u5c0f\u5316\u8282\u70b9\u95f4\u8df3\u6570\u5e76\u6700\u5927\u5316\u541e\u5410\u91cf\u3002\u4f8b\u5982\uff0c\u5728 spine-block \u67b6\u6784\u4e2d\uff0c\u5c06\u6240\u6709\u6210\u5458 Pod \u8c03\u5ea6\u5230\u540c\u4e00 ",(0,t.kt)("inlineCode",{parentName:"p"},"block")," \u6216 ",(0,t.kt)("inlineCode",{parentName:"p"},"spine")," \u4ea4\u6362\u673a\u4e0b\uff0c\u4e0e\u5c06\u5b83\u4eec\u5206\u6563\u5728\u4e0d\u540c spine \u76f8\u6bd4\uff0c\u53ef\u4ee5\u663e\u8457\u964d\u4f4e\u901a\u4fe1\u5ef6\u8fdf\u3002"),(0,t.kt)("h3",{id:"\u62d3\u6251\u611f\u77e5\u8c03\u5ea6\u9700\u6c42"},"\u62d3\u6251\u611f\u77e5\u8c03\u5ea6\u9700\u6c42"),(0,t.kt)("p",null,"\u867d\u7136 Kubernetes \u7684\u539f\u751f\u8c03\u5ea6\u5668\u901a\u8fc7 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodAffinity")," \u652f\u6301\u57fa\u672c\u7684\u62d3\u6251\u7ea6\u675f\uff0c\u4f46\u5b83\u4ee5\u6bcf\u4e2a Pod \u4e3a\u57fa\u7840\u8fd0\u884c\uff0c\u7f3a\u4e4f Gang \u8c03\u5ea6\u8bed\u4e49\uff0c\u4f7f\u5176\u5bf9\u4e8e\u7d27\u5bc6\u8026\u5408\u5de5\u4f5c\u8d1f\u8f7d\u7684\u534f\u8c03\u653e\u7f6e\u65e0\u6548\u3002Koord-Scheduler \u62bd\u8c61\u4e86 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodGroup")," \u548c ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup")," \u6982\u5ff5\uff0c\u63d0\u4f9b\u5168\u6709\u6216\u5168\u65e0\u7684\u8bed\u4e49\uff0c\u5b9e\u73b0\u76f8\u4e92\u4f9d\u8d56 Pod \u7684\u96c6\u4f53\u8c03\u5ea6\u3002\u6b64\u5916\uff0c\u4e3a\u4e86\u6ee1\u8db3\u73b0\u4ee3 AI \u8bad\u7ec3\u7684\u9700\u6c42\uff0c\u6211\u4eec\u5c06\u5176\u6269\u5c55\u4e3a",(0,t.kt)("strong",{parentName:"p"},"\u7f51\u7edc\u62d3\u6251\u611f\u77e5\u8c03\u5ea6"),"\u2014\u2014\u4e00\u79cd\u57fa\u4e8e\u7f51\u7edc\u5c42\u6b21\u7ed3\u6784\u667a\u80fd\u9009\u62e9\u6700\u4f18\u8282\u70b9\u7684\u80fd\u529b\u3002"),(0,t.kt)("p",null,"\u6b64\u529f\u80fd\u786e\u4fdd\uff1a"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"\u5f53\u96c6\u7fa4\u8d44\u6e90\u5145\u8db3\u65f6\uff0c\u5177\u6709\u7f51\u7edc\u62d3\u6251\u8c03\u5ea6\u9700\u6c42\u7684 Pod \u5c06\u6839\u636e\u7528\u6237\u6307\u5b9a\u7684\u7b56\u7565\u88ab\u8c03\u5ea6\u5230\u6027\u80fd\u66f4\u597d\u7684\u62d3\u6251\u57df\uff08\u4f8b\u5982\uff0c\u66f4\u4f4e\u7684\u5ef6\u8fdf\u3001\u66f4\u9ad8\u7684\u5e26\u5bbd\uff09\u3002"),(0,t.kt)("li",{parentName:"ul"},"\u5f53\u96c6\u7fa4\u8d44\u6e90\u4e0d\u8db3\u65f6\uff0c\u8c03\u5ea6\u5668\u5c06\u57fa\u4e8e\u7f51\u7edc\u62d3\u6251\u7ea6\u675f\u901a\u8fc7 Job \u7ea7\u522b\u62a2\u5360\u4e3a GangGroup \u62a2\u5360\u8d44\u6e90\uff0c\u5e76\u5728 ",(0,t.kt)("inlineCode",{parentName:"li"},".status.nominatedNode")," \u5b57\u6bb5\u4e2d\u8bb0\u5f55\u8d44\u6e90\u63d0\u540d\uff0c\u4ee5\u786e\u4fdd\u4e00\u81f4\u7684\u653e\u7f6e\u3002")),(0,t.kt)("h3",{id:"\u96c6\u7fa4\u7f51\u7edc\u62d3\u6251"},"\u96c6\u7fa4\u7f51\u7edc\u62d3\u6251"),(0,t.kt)("p",null,"\u4f7f\u7528 NVIDIA \u7684 ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/NVIDIA/topograph/blob/main/docs/k8s.md"},"topograph")," \u7b49\u5de5\u5177\u4e3a\u8282\u70b9\u6807\u8bb0\u5176\u7f51\u7edc\u62d3\u6251\u4f4d\u7f6e\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Node\nmetadata:\n  name: node-0\n  labels:\n    network.topology.nvidia.com/accelerator: nvl1\n    network.topology.nvidia.com/block: s1\n    network.topology.nvidia.com/spine: s2\n    network.topology.nvidia.com/datacenter: s3\n")),(0,t.kt)("p",null,"\u7ba1\u7406\u5458\u901a\u8fc7\u540d\u4e3a ",(0,t.kt)("inlineCode",{parentName:"p"},"default")," \u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"ClusterNetworkTopology")," CR \u5b9a\u4e49\u62d3\u6251\u5c42\u6b21\u7ed3\u6784\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: scheduling.koordinator.sh/v1alpha1\nkind: ClusterNetworkTopology\nmetadata:\n  name: default\nspec:\n  networkTopologySpec:\n    - labelKey:\n      - network.topology.nvidia.com/spine\n      topologyLayer: SpineLayer\n    - labelKey:\n      - network.topology.nvidia.com/block\n      parentTopologyLayer: SpineLayer\n      topologyLayer: BlockLayer\n    - parentTopologyLayer: BlockLayer\n      topologyLayer: NodeTopologyLayer\n")),(0,t.kt)("p",null,"\u62d3\u6251\u5f62\u6210\u6811\u72b6\u7ed3\u6784\uff0c\u5176\u4e2d\u6bcf\u4e00\u5c42\u4ee3\u8868\u7f51\u7edc\u4e2d\u7684\u805a\u5408\u7ea7\u522b\uff08\u4f8b\u5982\uff0cNode \u2192 block \u2192 spine\uff09\u3002"),(0,t.kt)("p",null,(0,t.kt)("inlineCode",{parentName:"p"},"ClusterNetworkTopology")," \u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"status.detailStatus")," \u5b57\u6bb5\u7531 Koordinator \u81ea\u52a8\u7ef4\u62a4\uff0c\u53cd\u6620\u96c6\u7fa4\u4e2d\u7684\u5b9e\u9645\u7f51\u7edc\u62d3\u6251\u7ed3\u6784\u548c\u8282\u70b9\u5206\u5e03\u3002\u5b83\u5448\u73b0\u4ece\u9876\u5c42\uff08\u96c6\u7fa4\uff09\u5230\u5404\u4e2a\u8282\u70b9\u7684\u5206\u5c42\u89c6\u56fe\u3002",(0,t.kt)("inlineCode",{parentName:"p"},"detailStatus")," \u4e2d\u7684\u6bcf\u4e2a\u6761\u76ee\u4ee3\u8868\u7279\u5b9a\u62d3\u6251\u5c42\u7684\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u5177\u6709\u5173\u952e\u5b57\u6bb5\uff1a"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"topologyInfo"),"\uff1a \u5f53\u524d\u5c42\u7684\u7c7b\u578b\u548c\u540d\u79f0\uff08\u4f8b\u5982\uff0c",(0,t.kt)("inlineCode",{parentName:"li"},"SpineLayer"),"\uff0c",(0,t.kt)("inlineCode",{parentName:"li"},"s1"),"\uff09\u3002"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"parentTopologyInfo"),"\uff1a \u7236\u5c42\u7684\u4fe1\u606f\u3002"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"childTopologyNames"),"\uff1a \u4e0b\u4e00\u8f83\u4f4e\u5c42\u4e2d\u7684\u5b50\u57df\u5217\u8868\u3002"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"nodeNum"),"\uff1a \u6b64\u62d3\u6251\u57df\u5185\u7684\u8282\u70b9\u6570\u91cf\u3002")),(0,t.kt)("p",null,"\u4ee5\u4e0b\u662f ",(0,t.kt)("inlineCode",{parentName:"p"},"clusterNetworkTopology.status.detailStatus")," \u7684\u793a\u4f8b:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: scheduling.koordinator.sh/v1alpha1\nkind: ClusterNetworkTopology\nmetadata:\n  name: default\nspec:\n  networkTopologySpec:\n  - labelKey:\n    - network.topology.nvidia.com/spine\n    topologyLayer: SpineLayer\n  - labelKey:\n    - network.topology.nvidia.com/block\n    parentTopologyLayer: SpineLayer\n    topologyLayer: BlockLayer\n  - parentTopologyLayer: BlockLayer\n    topologyLayer: NodeTopologyLayer\nstatus:\n  detailStatus:\n  - childTopologyLayer: SpineLayer\n    childTopologyNames:\n    - s1\n    - s2\n    nodeNum: 8\n    topologyInfo:\n      topologyLayer: ClusterTopologyLayer\n      topologyName: ""\n  - childTopologyLayer: BlockLayer\n    childTopologyNames:\n    - b2\n    - b1\n    nodeNum: 4\n    parentTopologyInfo:\n      topologyLayer: ClusterTopologyLayer\n      topologyName: ""\n    topologyInfo:\n      topologyLayer: SpineLayer\n      topologyName: s1\n  - childTopologyLayer: NodeTopologyLayer\n    nodeNum: 2\n    parentTopologyInfo:\n      topologyLayer: SpineLayer\n      topologyName: s1\n    topologyInfo:\n      topologyLayer: BlockLayer\n      topologyName: b2\n  - childTopologyLayer: NodeTopologyLayer\n    nodeNum: 2\n    parentTopologyInfo:\n      topologyLayer: SpineLayer\n      topologyName: s1\n    topologyInfo:\n      topologyLayer: BlockLayer\n      topologyName: b1\n  - childTopologyLayer: BlockLayer\n    childTopologyNames:\n    - b3\n    - b4\n    nodeNum: 4\n    parentTopologyInfo:\n      topologyLayer: ClusterTopologyLayer\n      topologyName: ""\n    topologyInfo:\n      topologyLayer: SpineLayer\n      topologyName: s2\n  - childTopologyLayer: NodeTopologyLayer\n    nodeNum: 2\n    parentTopologyInfo:\n      topologyLayer: SpineLayer\n      topologyName: s2\n    topologyInfo:\n      topologyLayer: BlockLayer\n      topologyName: b3\n  - childTopologyLayer: NodeTopologyLayer\n    nodeNum: 2\n    parentTopologyInfo:\n      topologyLayer: SpineLayer\n      topologyName: s2\n    topologyInfo:\n      topologyLayer: BlockLayer\n      topologyName: b4\n')),(0,t.kt)("p",null,"\u57fa\u4e8e\u4e0a\u8ff0 ",(0,t.kt)("inlineCode",{parentName:"p"},"status"),",\u96c6\u7fa4\u5177\u6709\u4e24\u5c42 ",(0,t.kt)("strong",{parentName:"p"},"spine-block")," \u67b6\u6784:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"ClusterTopologyLayer\n\u251c\u2500\u2500 SpineLayer: s1\n\u2502   \u251c\u2500\u2500 BlockLayer: b1\n\u2502   \u2502   \u2514\u2500\u2500 NodeTopologyLayer: 2 nodes\n\u2502   \u2514\u2500\u2500 BlockLayer: b2\n\u2502       \u2514\u2500\u2500 NodeTopologyLayer: 2 nodes\n\u2514\u2500\u2500 SpineLayer: s2\n    \u251c\u2500\u2500 BlockLayer: b3\n    \u2502   \u2514\u2500\u2500 NodeTopologyLayer: 2 nodes\n    \u2514\u2500\u2500 BlockLayer: b4\n        \u2514\u2500\u2500 NodeTopologyLayer: 2 nodes\n")),(0,t.kt)("h3",{id:"\u7f51\u7edc\u62d3\u6251\u7b56\u7565"},"\u7f51\u7edc\u62d3\u6251\u7b56\u7565"),(0,t.kt)("p",null,"\u5f53\u7528\u6237\u60f3\u8981\u4e3a ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup")," \u914d\u7f6e\u7f51\u7edc\u62d3\u6251\u805a\u96c6\u7b56\u7565\u65f6\uff0c\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u6ce8\u89e3\u5176 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodGroup"),"\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-master\n  namespace: default\n  annotations:\n    gang.scheduling.koordinator.sh/groups: ["default/gang-master", "default/gang-worker"]\n    gang.scheduling.koordinator.sh/network-topology-spec: |\n      {\n        "gatherStrategy": [\n          {\n            "layer": "SpineLayer",\n            "strategy": "PreferGather"\n          },\n          {\n            "layer": "BlockLayer",\n            "strategy": "PreferGather"\n          },\n          {\n            "layer": "AcceleratorLayer",\n            "strategy": "PreferGather"\n          }\n        ]\n      }\nspec:\n  minMember: 1\n--- \napiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-worker\n  namespace: default\n  annotations:\n    gang.scheduling.koordinator.sh/groups: ["default/gang-master", "default/gang-worker"]\n    gang.scheduling.koordinator.sh/network-topology-spec: |\n      {\n        "gatherStrategy": [\n          {\n            "layer": "SpineLayer",\n            "strategy": "PreferGather"\n          },\n          {\n            "layer": "BlockLayer",\n            "strategy": "PreferGather"\n          },\n          {\n            "layer": "AcceleratorLayer",\n            "strategy": "PreferGather"\n          }\n        ]\n      }\nspec:\n  minMember: 2\n')),(0,t.kt)("p",null,"\u4e0a\u8ff0 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodGroup")," \u8868\u793a\u5c5e\u4e8e\u5b83\u7684 Pod \u9996\u5148\u5c1d\u8bd5\u4f4d\u4e8e\u52a0\u901f\u5668\u4e92\u8fde\u57df\u4e2d\uff0c\u7136\u540e\u5c1d\u8bd5\u4f4d\u4e8e Block \u4e2d\uff0c\u6700\u540e\u5c1d\u8bd5\u4f4d\u4e8e Spine \u7f51\u7edc\u4e2d\u3002"),(0,t.kt)("p",null,"\u6709\u65f6\uff0c\u7531\u4e8e\u5bf9\u901a\u4fe1\u5e26\u5bbd\u7684\u4e25\u683c\u9700\u6c42\uff0c\u7528\u6237\u53ef\u80fd\u5e0c\u671b\u5c06 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup")," \u7684\u6240\u6709\u6210\u5458 Pod \u653e\u7f6e\u5728\u540c\u4e00 Spine \u4e0b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539 ",(0,t.kt)("inlineCode",{parentName:"p"},"PodGroup"),"\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-master\n  namespace: default\n  annotations:\n    gang.scheduling.koordinator.sh/groups: ["default/gang-master", "default/gang-worker"]\n    gang.scheduling.koordinator.sh/network-topology-spec: |\n      {\n        "gatherStrategy": [\n          {\n            "layer": "spineLayer",\n            "strategy": "MustGather"\n          }\n        ]\n      }\nspec:\n  minMember: 1\n---\napiVersion: scheduling.sigs.k8s.io/v1alpha1\nkind: PodGroup\nmetadata:\n  name: gang-worker\n  namespace: default\n  annotations:\n    gang.scheduling.koordinator.sh/groups: ["default/gang-master", "default/gang-worker"]\n    gang.scheduling.koordinator.sh/network-topology-spec: |\n      {\n        "gatherStrategy": [\n          {\n            "layer": "spineLayer",\n            "strategy": "MustGather"\n          }\n        ]\n      }\nspec:\n  minMember: 2\n')),(0,t.kt)("h3",{id:"\u7f51\u7edc\u62d3\u6251-pod-\u7d22\u5f15"},"\u7f51\u7edc\u62d3\u6251 Pod \u7d22\u5f15"),(0,t.kt)("p",null,"\u5728\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\uff0c\u4e3a\u6bcf\u4e2a Pod \u5206\u914d\u7d22\u5f15\u5bf9\u4e8e\u5728\u6570\u636e\u5e76\u884c\uff08DP\uff09\u4f5c\u4e1a\u4e2d\u5efa\u7acb\u901a\u4fe1\u6a21\u5f0f\u81f3\u5173\u91cd\u8981\u3002\u7d22\u5f15\u786e\u5b9a Pod \u5728\u96c6\u4f53\u64cd\u4f5c\u4e2d\u7684\u903b\u8f91\u987a\u5e8f\u3002\u4f8b\u5982\uff0c\u5bf9\u4e8e DP=2 \u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup"),"\uff0c\u6210\u5458 Pod \u53ef\u4ee5\u6ce8\u89e3\u5982\u4e0b\uff1a"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-example1\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: gang-example\n  annotations:\n    gang.scheduling.koordinator.sh/network-topology-index: "1"\nspec:\n  schedulerName: koord-scheduler\n...\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: pod-example2\n  namespace: default\n  labels:\n    pod-group.scheduling.sigs.k8s.io: gang-example\n  annotations:\n    gang.scheduling.koordinator.sh/network-topology-index: "2"\nspec:\n  schedulerName: koord-scheduler\n...\n')),(0,t.kt)("h3",{id:"\u62d3\u6251\u805a\u96c6\u7b97\u6cd5"},"\u62d3\u6251\u805a\u96c6\u7b97\u6cd5"),(0,t.kt)("p",null,"\u7f51\u7edc\u62d3\u6251\u805a\u96c6\u7b97\u6cd5\u662f\u4e3a M \u4e2a Pod \u627e\u5230\u6700\u4f73\u8282\u70b9\uff0c\u7ed9\u5b9a\u5c5e\u4e8e\u5e76\u884c\u611f\u77e5 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup")," \u7684 M \u4e2a\u6210\u5458 Pod\u3001\u6240\u6709\u53ef\u4ee5\u653e\u7f6e Pod \u7684\u8282\u70b9\u3001\u6bcf\u4e2a\u8282\u70b9\u7684\u7f51\u7edc\u62d3\u6251\u4f4d\u7f6e\u3002\u6574\u4f53\u8ba1\u7b97\u8fc7\u7a0b\u53ef\u4ee5\u9010\u6b65\u63cf\u8ff0\u5982\u4e0b\uff1a"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"\u8bad\u7ec3\u4efb\u52a1\u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup")," \u7684\u6210\u5458 Pod \u901a\u5e38\u662f\u540c\u8d28\u7684\u3002\u6211\u4eec\u4ece\u6210\u5458 Pod \u4e2d\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u4f5c\u4e3a\u4ee3\u8868 Pod\u3002")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"\u4ece\u7f51\u7edc\u62d3\u6251\u5c42\u6b21\u7ed3\u6784\u7684\u5e95\u90e8\u5230\u9876\u90e8,\u9012\u5f52\u8ba1\u7b97\u6bcf\u4e2a\u62d3\u6251\u8282\u70b9\u53ef\u4ee5\u63d0\u4f9b\u7684\u6210\u5458 Pod \u6570\u91cf\u4f5c\u4e3a ",(0,t.kt)("inlineCode",{parentName:"p"},"offerslots"),"\u3002\u8282\u70b9\u53ef\u4ee5\u5bb9\u7eb3\u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"offerslots")," \u53ef\u4ee5\u901a\u8fc7\u8fed\u4ee3\u8c03\u7528 ",(0,t.kt)("inlineCode",{parentName:"p"},"NodeInfo.AddPod"),"\u3001",(0,t.kt)("inlineCode",{parentName:"p"},"fwk.RunPreFilterExtensionsAddPod")," \u548c ",(0,t.kt)("inlineCode",{parentName:"p"},"fwk.RunFilterWithNominatedNode")," \u6765\u5b9e\u73b0\u3002")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"\u5728\u6240\u6709\u53ef\u4ee5\u5bb9\u7eb3 ",(0,t.kt)("inlineCode",{parentName:"p"},"GangGroup")," \u6240\u6709\u6210\u5458 Pod \u7684\u62d3\u6251\u8282\u70b9\u4e2d,\u9009\u62e9\u90a3\u4e9b\u5c42\u7ea7\u6700\u4f4e\u7684\u4f5c\u4e3a\u6211\u4eec\u7684 ",(0,t.kt)("inlineCode",{parentName:"p"},"\u5019\u9009\u62d3\u6251\u8282\u70b9"),"\u3002"),(0,t.kt)("p",{parentName:"li"},(0,t.kt)("img",{alt:"topology_offerslot_candidatenode",src:o(41403).Z,width:"3124",height:"1214"}))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"\u5728\u6b65\u9aa4 3 \u4e2d\u9009\u62e9\u7684\u5019\u9009\u62d3\u6251\u8282\u70b9\u4e2d,\u6839\u636e ",(0,t.kt)("inlineCode",{parentName:"p"},"binpack")," \u539f\u5219,\u9009\u62e9 offerslot \u6700\u63a5\u8fd1\u4f5c\u4e1a\u6240\u9700 offerslot \u7684\u5019\u9009\u62d3\u6251\u8282\u70b9\u4f5c\u4e3a\u6211\u4eec\u7684\u6700\u7ec8\u62d3\u6251\u8282\u70b9\u89e3\u51b3\u65b9\u6848\u3002\u5982\u4e0b\u56fe\u6240\u793a,\u6211\u4eec\u9009\u62e9 Node5-Node8 \u4f5c\u4e3a\u4f5c\u4e1a\u7684\u6700\u7ec8\u8c03\u5ea6\u7ed3\u679c\u3002"),(0,t.kt)("p",{parentName:"li"},(0,t.kt)("img",{alt:"topology_final_placement",src:o(9835).Z,width:"2196",height:"820"})))),(0,t.kt)("h2",{id:"\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48"},"\u4e0b\u4e00\u6b65\u662f\u4ec0\u4e48\uff1a"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/zh-Hans/docs/user-manuals/gang-scheduling"},"\u7ec4\u8c03\u5ea6"),"\uff1a\u4e86\u89e3\u5982\u4f55\u4e3a\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u542f\u7528\u7ec4\u8c03\u5ea6\u3002"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/zh-Hans/docs/user-manuals/network-topology-aware-scheduling"},"\u7f51\u7edc\u62d3\u6251\u611f\u77e5\u8c03\u5ea6"),"\uff1a\u4e86\u89e3\u5982\u4f55\u4e3a\u7ec4\u8c03\u5ea6\u542f\u7528\u7f51\u7edc\u62d3\u6251\u611f\u77e5\u8c03\u5ea6\u3002"),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("a",{parentName:"li",href:"/zh-Hans/docs/user-manuals/job-level-preemption"},"\u4f5c\u4e1a\u7ea7\u62a2\u5360"),"\uff1a\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4f5c\u4e1a\u7ea7\u62a2\u5360\u3002")))}m.isMDXComponent=!0},12574:(e,n,o)=>{o.d(n,{Z:()=>a});const a=o.p+"assets/images/networktopo-1-15ff3dfaa8b22320a1aa11d9ff39147c.png"},9835:(e,n,o)=>{o.d(n,{Z:()=>a});const a=o.p+"assets/images/topology_final_placement-1aa756976a2fb3e7699c4627250d6aaf.jpg"},41403:(e,n,o)=>{o.d(n,{Z:()=>a});const a=o.p+"assets/images/topology_offerslot_candidatenode-beea873b6973cb265ba7c56e0c3882a5.jpg"}}]);