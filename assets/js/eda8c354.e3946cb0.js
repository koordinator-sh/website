"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[9336],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=o,k=p["".concat(s,".").concat(d)]||p[d]||c[d]||a;return n?r.createElement(k,i(i({ref:t},m),{},{components:n})):r.createElement(k,i({ref:t},m))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3004:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const a={},i="Component Guide",l={unversionedId:"developer-guide/component-guide",id:"developer-guide/component-guide",title:"Component Guide",description:"This document is generated with assistance from Qoder AI.",source:"@site/docs/developer-guide/component-guide.md",sourceDirName:"developer-guide",slug:"/developer-guide/component-guide",permalink:"/docs/next/developer-guide/component-guide",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/developer-guide/component-guide.md",tags:[],version:"current",lastUpdatedBy:"Frame",lastUpdatedAt:1760590662,formattedLastUpdatedAt:"Oct 16, 2025",frontMatter:{},sidebar:"docs",previous:{title:"Developing Custom Plugins in koord-descheduler",permalink:"/docs/next/best-practices/develop-custom-deschedule-plugins"},next:{title:"Metrics Collection",permalink:"/docs/next/developer-guide/metrics-collection"}},s={},u=[{value:"Introduction",id:"introduction",level:2},{value:"koord-manager",id:"koord-manager",level:2},{value:"koord-scheduler",id:"koord-scheduler",level:2},{value:"koordlet",id:"koordlet",level:2},{value:"koord-descheduler",id:"koord-descheduler",level:2},{value:"koord-device-daemon",id:"koord-device-daemon",level:2},{value:"koord-runtime-proxy",id:"koord-runtime-proxy",level:2},{value:"Component Communication and Integration",id:"component-communication-and-integration",level:2},{value:"Operational Considerations",id:"operational-considerations",level:2},{value:"Performance and Scaling",id:"performance-and-scaling",level:2},{value:"Security and Best Practices",id:"security-and-best-practices",level:2}],m={toc:u},p="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"component-guide"},"Component Guide"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"This document is generated with assistance from Qoder AI.")),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Koordinator is a QoS-based scheduling system that enhances Kubernetes cluster efficiency and reliability for hybrid workloads. This guide documents each component's purpose, architecture, configuration, and operations. Components communicate through the Kubernetes API server and share configuration via ConfigMaps for coordinated resource management."),(0,o.kt)("h2",{id:"koord-manager"},"koord-manager"),(0,o.kt)("p",null,"The koord-manager is Koordinator's control plane, managing CRDs and webhooks while coordinating subsystems through leader election. It initializes controllers, webhooks, and shared informers for cluster event processing."),(0,o.kt)("p",null,"Key configuration options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--enable-leader-election"),": Enable high availability"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--metrics-addr"),": Expose monitoring metrics"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--feature-gates"),": Control alpha/beta features"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--config-namespace"),": Specify configuration namespace"),(0,o.kt)("li",{parentName:"ul"},"Webhook server: Runs on port 9876 for admission control")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph TB\nManager[koord-manager] --\x3e Webhook[Webhook Server]\nManager --\x3e Leader[Leader Election]\nManager --\x3e Scheduler[koord-scheduler]\nManager --\x3e Koordlet[koordlet]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-manager/main.go#L1-L223"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/webhook/server.go#L1-L161"},"server.go"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-manager/main.go#L61-L79"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/webhook/server.go#L47-L102"},"server.go"))),(0,o.kt)("h2",{id:"koord-scheduler"},"koord-scheduler"),(0,o.kt)("p",null,"The koord-scheduler extends Kubernetes scheduler with advanced capabilities for co-located workloads through a plugin-based architecture."),(0,o.kt)("p",null,"Configuration uses the ",(0,o.kt)("inlineCode",{parentName:"p"},"--config")," flag pointing to a YAML file (typically ",(0,o.kt)("inlineCode",{parentName:"p"},"koord-scheduler-config")," ConfigMap). The configuration extends Kubernetes scheduler schema with Koordinator-specific components."),(0,o.kt)("p",null,"Key scheduling plugins:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"LoadAwareScheduling"),": Real-time node resource utilization"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"NodeNUMAResource"),": NUMA-aware CPU and memory allocation"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Reservation"),": Resource reservation with preemption support"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"ElasticQuota"),": Dynamic quota allocation and eviction"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Coscheduling"),": Gang scheduling for pod groups"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"DeviceShare"),": Shared device management (GPU, RDMA, FPGA)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph TD\nA[Scheduler Configuration] --\x3e B[Global Settings]\nA --\x3e C[Plugin Configurations]\nA --\x3e D[Framework Extensions]\nB --\x3e F[InsecureServing]\nC --\x3e G[LoadAwareScheduling]\nC --\x3e H[NodeNUMAResource]\nC --\x3e I[Reservation]\nC --\x3e J[ElasticQuota]\nC --\x3e K[Coscheduling]\nC --\x3e L[DeviceShare]\nD --\x3e M[ServicesEngine]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-scheduler/app/config/config.go#L1-L52"},"config.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/scheduler/apis/config/v1/types.go#L1-L322"},"types.go"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-scheduler/app/config/config.go"},"config.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/manager/scheduler.yaml"},"scheduler.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/scheduler/apis/config/v1/types.go"},"types.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/scheduler/apis/config/v1/defaults.go"},"defaults.go"))),(0,o.kt)("h2",{id:"koordlet"},"koordlet"),(0,o.kt)("p",null,"The koordlet runs as a daemon on each node, collecting metrics, enforcing QoS policies, and managing runtime hooks."),(0,o.kt)("p",null,"Configuration uses ConfigMaps with these key settings:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"ConfigMap name and namespace"),(0,o.kt)("li",{parentName:"ul"},"States informer configuration"),(0,o.kt)("li",{parentName:"ul"},"Metric cache settings"),(0,o.kt)("li",{parentName:"ul"},"QoS manager configuration"),(0,o.kt)("li",{parentName:"ul"},"Runtime hook configuration"),(0,o.kt)("li",{parentName:"ul"},"Audit and prediction settings")),(0,o.kt)("p",null,"Architecture subsystems:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"MetricCache"),": Stores collected metrics with pluggable backends"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"MetricsAdvisor"),": Analyzes metrics for optimization recommendations"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"QOSManager"),": Enforces QoS policies and resource allocation"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"RuntimeHooks"),": Integrates with container runtimes"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Prediction"),": Provides resource usage prediction"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"StatesInformer"),": Maintains consistent pod and node state views")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"classDiagram\nclass daemon {\n+metricAdvisor MetricAdvisor\n+statesInformer StatesInformer\n+metricCache MetricCache\n+qosManager QOSManager\n+runtimeHook RuntimeHook\n+predictServer PredictServer\n+executor ResourceUpdateExecutor\n+extensionControllers []Controller\n}\nclass MetricAdvisor {\n+Run(stopCh <-chan struct{})\n+HasSynced() bool\n}\nclass StatesInformer {\n+Run(stopCh <-chan struct{})\n+HasSynced() bool\n}\nclass MetricCache {\n+Run(stopCh <-chan struct{})\n}\nclass QOSManager {\n+Run(stopCh <-chan struct{})\n}\nclass RuntimeHook {\n+Run(stopCh <-chan struct{})\n}\nclass PredictServer {\n+Setup(statesInformer StatesInformer, metricCache MetricCache)\n+Run(stopCh <-chan struct{})\n}\nclass ResourceUpdateExecutor {\n+Run(stopCh <-chan struct{})\n}\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/koordlet.go#L1-L210"},"koordlet.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/config/config.go#L38-L72"},"config.go"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/koordlet.go"},"koordlet.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/config/config.go"},"config.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koordlet/main.go"},"main.go"))),(0,o.kt)("h2",{id:"koord-descheduler"},"koord-descheduler"),(0,o.kt)("p",null,"The koord-descheduler identifies and evicts pods to improve resource utilization and cluster balance through a modular, profile-based architecture."),(0,o.kt)("p",null,"Operates as a Kubernetes controller manager with:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Descheduler Core"),": Coordinates descheduling policies"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Controller Manager"),": Manages reconciliation loops for custom resources"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Profiles"),": Define enabled plugins and configurations"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Plugins"),": Implement descheduling strategies (deschedule, balance, filter, evict)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Informer Factory"),": Maintains cached cluster resource views"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Eviction Limiter"),": Controls pod eviction rate to prevent disruption")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph TB\nA[koord-descheduler] --\x3e B[Descheduler Core]\nA --\x3e C[Controller Manager]\nB --\x3e D[Profiles]\nD --\x3e E[Deschedule Plugins]\nD --\x3e F[Balance Plugins]\nD --\x3e G[Filter Plugins]\nD --\x3e H[Evict Plugins]\nC --\x3e I[Migration Controller]\nC --\x3e J[Drain Controller]\nB --\x3e K[Eviction Limiter]\nB --\x3e L[Informer Factory]\nL --\x3e M[Node Informer]\nL --\x3e N[Pod Informer]\nL --\x3e O[Custom Resource Informers]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/descheduler/descheduler.go#L156-L240"},"descheduler.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-descheduler/app/server.go#L281-L319"},"server.go"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/descheduler/descheduler.go"},"descheduler.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-descheduler/app/server.go"},"server.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-descheduler/app/options/options.go"},"options.go"))),(0,o.kt)("h2",{id:"koord-device-daemon"},"koord-device-daemon"),(0,o.kt)("p",null,"The koord-device-daemon discovers and labels heterogeneous devices (GPUs, NPUs, etc.) on nodes, running as a daemon that periodically scans and updates node labels."),(0,o.kt)("p",null,"Key configuration flags:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--oneshot"),": Single execution mode"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--no-timestamp"),": Disable timestamp in labels"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--sleep-interval"),": Device discovery frequency"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--prints-output-file"),": Output file path for device info")),(0,o.kt)("p",null,"Architecture components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resource Feature Discovery"),": Discovers and processes device information"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Prints Writer"),": Outputs device information"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Manager Map"),": Registry for different hardware type device managers"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Configuration"),": Manages component configuration from files, environment, and CLI")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},'flowchart TD\nStart([Start]) --\x3e LoadConfig["Load Configuration"]\nLoadConfig --\x3e CreatePrinters["Create Printers"]\nCreatePrinters --\x3e GeneratePrints["Generate Prints"]\nGeneratePrints --\x3e OutputPrints["Output Prints"]\nOutputPrints --\x3e CheckOneshot["Check Oneshot Mode"]\nCheckOneshot --\x3e |Yes| Exit([Exit])\nCheckOneshot --\x3e |No| Sleep["Sleep Interval"]\nSleep --\x3e Rerun["Rerun Discovery"]\nRerun --\x3e GeneratePrints\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-device-daemon/main.go#L1-L262"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-device-daemon/config/v1/config.go#L1-L41"},"config.go"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-device-daemon/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-device-daemon/config/v1/config.go"},"config.go"))),(0,o.kt)("h2",{id:"koord-runtime-proxy"},"koord-runtime-proxy"),(0,o.kt)("p",null,"The koord-runtime-proxy acts as middleware between kubelet and container runtimes, intercepting CRI calls to apply resource management policies."),(0,o.kt)("p",null,"Key configuration flags:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--koord-runtimeproxy-endpoint"),": Service endpoint"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--remote-runtime-service-endpoint"),": Backend runtime service"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--backend-runtime-mode"),": Container engine (Containerd or Docker)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"--runtime-hook-server-key/val"),": Runtime hook server identification")),(0,o.kt)("p",null,"Supports two backend modes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Containerd"),": CRI server for Containerd runtime"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Docker"),": Docker server for Docker runtime")),(0,o.kt)("p",null,"Architecture:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Runtime Manager Server"),": Abstract interface for runtime implementations"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"CRI Server/Docker Server"),": Runtime-specific implementations"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Dispatcher"),": Routes CRI calls to handlers"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Resource Executor"),": Applies resource policies to containers")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph TD\nA[koord-runtime-proxy] --\x3e B[Runtime Proxy Endpoint]\nA --\x3e C[Backend Runtime Mode]\nC --\x3e D[Containerd]\nC --\x3e E[Docker]\nD --\x3e F[CRI Server]\nE --\x3e G[Docker Server]\nA --\x3e H[Runtime Hook Server Key/Val]\nH --\x3e I[Skip Hook Server Pods]\nF --\x3e J[Intercept CRI Calls]\nG --\x3e J\nJ --\x3e K[Apply Resource Policies]\nK --\x3e L[Forward to Backend Runtime]\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-runtime-proxy/main.go#L1-L72"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-runtime-proxy/options/options.go#L1-L25"},"options.go"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-runtime-proxy/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-runtime-proxy/options/options.go"},"options.go"))),(0,o.kt)("h2",{id:"component-communication-and-integration"},"Component Communication and Integration"),(0,o.kt)("p",null,"Koordinator components communicate through the Kubernetes API server and share configuration via ConfigMaps in a control plane/data plane pattern."),(0,o.kt)("p",null,"Primary communication patterns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"API Server Interactions"),": All components watch resources, update status, and create custom resources"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Shared Configuration"),": ConfigMaps mounted as volumes or accessed via API server"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Webhook Integration"),": koord-manager webhooks called during resource creation/updates"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Metrics Collection"),": koordlet collects node metrics for scheduler decisions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Event Propagation"),": Events and status updates through API server")),(0,o.kt)("p",null,"Integration workflow:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"koord-manager initializes controllers and webhooks"),(0,o.kt)("li",{parentName:"ol"},"koord-scheduler registers with Kubernetes scheduler framework"),(0,o.kt)("li",{parentName:"ol"},"koordlet starts on each node and collects metrics"),(0,o.kt)("li",{parentName:"ol"},"koord-device-daemon discovers and labels node devices"),(0,o.kt)("li",{parentName:"ol"},"koord-runtime-proxy intercepts container runtime calls"),(0,o.kt)("li",{parentName:"ol"},"Components coordinate through API server shared state")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},"sequenceDiagram\nparticipant API as Kubernetes API Server\nparticipant Manager as koord-manager\nparticipant Scheduler as koord-scheduler\nparticipant Koordlet as koordlet\nparticipant Device as koord-device-daemon\nparticipant Proxy as koord-runtime-proxy\nManager->>API : Watch CRDs and ConfigMaps\nScheduler->>API : Register as scheduler\nKoordlet->>API : Report node metrics\nDevice->>API : Update node labels with device info\nProxy->>API : Intercept CRI calls\nAPI->>Scheduler : Provide metrics for scheduling\nScheduler->>API : Schedule pods with QoS policies\nAPI->>Koordlet : Apply QoS policies to pods\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-manager/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-scheduler/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koordlet/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-device-daemon/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-runtime-proxy/main.go"},"main.go"))),(0,o.kt)("h2",{id:"operational-considerations"},"Operational Considerations"),(0,o.kt)("p",null,"Effective Koordinator operation requires attention to configuration, monitoring, troubleshooting, and lifecycle management."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Configuration Management"),": Configuration managed through ConfigMaps mounted as volumes or via API server. Changes typically require component restarts."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Monitoring and Metrics"),": All components expose Prometheus metrics including:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Component health and readiness"),(0,o.kt)("li",{parentName:"ul"},"API server request latencies and errors"),(0,o.kt)("li",{parentName:"ul"},"Resource utilization and efficiency"),(0,o.kt)("li",{parentName:"ul"},"Scheduling and descheduling performance"),(0,o.kt)("li",{parentName:"ul"},"QoS policy enforcement statistics")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Common Issues"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Webhook Timeouts: Increase timeout settings in large clusters"),(0,o.kt)("li",{parentName:"ul"},"Resource Starvation: Adjust QoS policies and limits"),(0,o.kt)("li",{parentName:"ul"},"Scheduling Failures: Verify node labels and taints/tolerations"),(0,o.kt)("li",{parentName:"ul"},"Metric Collection: Check koordlet connectivity and permissions"),(0,o.kt)("li",{parentName:"ul"},"Device Discovery: Verify device drivers and permissions")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Lifecycle Management"),": Manage components as standard Kubernetes workloads with appropriate resources, limits, and probes. Perform rolling updates carefully, especially for koord-manager webhooks."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-manager/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-scheduler/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koordlet/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-descheduler/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-device-daemon/main.go"},"main.go")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koord-runtime-proxy/main.go"},"main.go"))),(0,o.kt)("h2",{id:"performance-and-scaling"},"Performance and Scaling"),(0,o.kt)("p",null,"Performance and scalability depend on cluster size, workload characteristics, and configuration."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"koord-manager Scaling"),": Single replica sufficient for small/medium clusters. Large clusters may need multiple replicas. Tune webhook timeouts based on load."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"koord-scheduler Performance"),": Influenced by enabled plugins, policy complexity, and scheduling frequency. Optimize plugin configuration and use efficient informer caches."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"koordlet Resource Usage"),": Depends on metric collection frequency, monitored resources, and QoS policy complexity. Tune collection intervals and retention based on requirements."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Scaling Guidelines"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Monitor component resources and adjust requests/limits"),(0,o.kt)("li",{parentName:"ul"},"Scale koord-manager based on API server load"),(0,o.kt)("li",{parentName:"ul"},"Optimize scheduler plugins for workload patterns"),(0,o.kt)("li",{parentName:"ul"},"Tune metric collection frequency"),(0,o.kt)("li",{parentName:"ul"},"Use node affinity and taints for component placement")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-mermaid"},'flowchart TD\nStart([Cluster Deployment]) --\x3e DetermineReplicas["Determine koord-manager Replicas"]\nDetermineReplicas --\x3e |Small Cluster| DeploySingleReplica["Deploy Single Replica"]\nDetermineReplicas --\x3e |Large Cluster| DeployMultipleReplicas["Deploy Multiple Replicas"]\nDeploySingleReplica --\x3e ConfigureWebhook["Configure Webhook Settings"]\nDeployMultipleReplicas --\x3e ConfigureWebhook\nConfigureWebhook --\x3e SetTimeouts["Set Webhook Timeouts"]\nSetTimeouts --\x3e ConfigureConcurrency["Configure Concurrency Settings"]\nConfigureConcurrency --\x3e ConfigureQueue["Configure Request Queue"]\nConfigureQueue --\x3e ConfigureRetry["Configure Retry Policy"]\nConfigureRetry --\x3e MonitorPerformance["Monitor Performance"]\nMonitorPerformance --\x3e AdjustConfiguration["Adjust Configuration as Needed"]\nAdjustConfiguration --\x3e ConfigureWebhook\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Diagram sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/manager/manager.yaml#L1-L55"},"manager.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/webhook/server.go#L47-L102"},"webhook.go"))),(0,o.kt)("h2",{id:"security-and-best-practices"},"Security and Best Practices"),(0,o.kt)("p",null,"Deploy Koordinator securely with these best practices:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"RBAC Configuration"),": Define minimum required permissions for each component following least privilege principle. RBAC configs are in ",(0,o.kt)("inlineCode",{parentName:"p"},"config/rbac")," directory."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Network Security"),": Configure network policies to restrict component communication. Webhook server should only be accessible to API server."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Secret Management"),": Store sensitive configuration in Secrets, not ConfigMaps. Properly manage and rotate TLS certificates."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Production Best Practices"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use dedicated namespaces for components"),(0,o.kt)("li",{parentName:"ul"},"Implement resource requests and limits"),(0,o.kt)("li",{parentName:"ul"},"Configure liveness and readiness probes"),(0,o.kt)("li",{parentName:"ul"},"Enable leader election for control plane components"),(0,o.kt)("li",{parentName:"ul"},"Regularly update to latest stable versions"),(0,o.kt)("li",{parentName:"ul"},"Monitor logs and metrics for issues"),(0,o.kt)("li",{parentName:"ul"},"Test configuration changes in non-production first"),(0,o.kt)("li",{parentName:"ul"},"Implement backup and recovery procedures")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Security Considerations"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Audit component permissions regularly"),(0,o.kt)("li",{parentName:"ul"},"Keep components updated for security fixes"),(0,o.kt)("li",{parentName:"ul"},"Limit webhook timeouts to prevent DoS"),(0,o.kt)("li",{parentName:"ul"},"Use network policies to restrict communication"),(0,o.kt)("li",{parentName:"ul"},"Implement proper logging and monitoring"),(0,o.kt)("li",{parentName:"ul"},"Follow Kubernetes pod security best practices")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Section sources")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/manager/manager.yaml"},"manager.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/manager/scheduler.yaml"},"scheduler.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/manager/koordlet.yaml"},"koordlet.yaml")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/rbac"},"rbac")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/webhook/server.go"},"webhook.go"))))}c.isMDXComponent=!0}}]);