"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[7793],{3905:(e,t,o)=>{o.d(t,{Zo:()=>m,kt:()=>g});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var c=r.createContext({}),s=function(e){var t=r.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},m=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(o),u=n,g=d["".concat(c,".").concat(u)]||d[u]||p[u]||a;return o?r.createElement(g,i(i({ref:t},m),{},{components:o})):r.createElement(g,i({ref:t},m))}));function g(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<a;s++)i[s]=o[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}u.displayName="MDXCreateElement"},6879:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=o(7462),n=(o(7294),o(3905));const a={},i="Metrics Collection",l={unversionedId:"developer-guide/metrics-collection",id:"developer-guide/metrics-collection",title:"Metrics Collection",description:"This document is generated with assistance from Qoder AI.",source:"@site/docs/developer-guide/metrics-collection.md",sourceDirName:"developer-guide",slug:"/developer-guide/metrics-collection",permalink:"/docs/next/developer-guide/metrics-collection",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/developer-guide/metrics-collection.md",tags:[],version:"current",lastUpdatedBy:"Frame",lastUpdatedAt:1760590662,formattedLastUpdatedAt:"Oct 16, 2025",frontMatter:{},sidebar:"docs",previous:{title:"Component Guide",permalink:"/docs/next/developer-guide/component-guide"},next:{title:"Extensibility",permalink:"/docs/next/developer-guide/extensibility"}},c={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Metrics Advisor Framework",id:"metrics-advisor-framework",level:2},{value:"Collector Interfaces and Extension Points",id:"collector-interfaces-and-extension-points",level:2},{value:"Existing Collector Implementations",id:"existing-collector-implementations",level:2},{value:"Node Resource Collector",id:"node-resource-collector",level:3},{value:"Performance Collector",id:"performance-collector",level:3},{value:"System Resource Collector",id:"system-resource-collector",level:3},{value:"Custom Collector Development",id:"custom-collector-development",level:2},{value:"Prometheus Integration",id:"prometheus-integration",level:2},{value:"Configuration and Management",id:"configuration-and-management",level:2},{value:"Conclusion",id:"conclusion",level:2}],m={toc:s},d="wrapper";function p(e){let{components:t,...o}=e;return(0,n.kt)(d,(0,r.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"metrics-collection"},"Metrics Collection"),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"This document is generated with assistance from Qoder AI.")),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"Koordinator's metrics collection system provides comprehensive monitoring for node/pod resource usage, performance characteristics, and system health. The metrics advisor framework collects, processes, and exports metrics from various system components and specialized devices. This document details the metrics collection architecture, extension interfaces, and Prometheus integration. The framework enables resource optimization through periodic collection of resource profiles and detection of container interference (CPU scheduling delays, memory allocation latency, PSI)."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/metrics_advisor.go#L1-L136"},"metrics_advisor.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/docs/design-archive/koordlet-architecture.md#L45-L50"},"metrics_advisor.md"))),(0,n.kt)("h2",{id:"metrics-advisor-framework"},"Metrics Advisor Framework"),(0,n.kt)("p",null,"The metrics advisor implements a plugin-based architecture for collecting and processing metrics from system components and specialized devices. The framework manages collector lifecycles through centralized orchestration using a shared state mechanism to coordinate between collectors, enabling derived metrics calculation (system resource usage = node usage - pod usage - host app usage)."),(0,n.kt)("p",null,"Designed for easy extension with new collectors for additional metrics or device types. Integrates with statesinformer for pod metadata and metriccache for metric storage. The advisor coordinates collection at configurable intervals while managing collector dependencies."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-mermaid"},'classDiagram\nclass MetricAdvisor {\n+Run(stopCh <-chan struct{}) error\n+HasSynced() bool\n}\nclass framework.Options {\n+Config *Config\n+StatesInformer StatesInformer\n+MetricCache MetricCache\n+CgroupReader CgroupReader\n+PodFilters map[string]PodFilter\n}\nclass framework.Context {\n+DeviceCollectors map[string]DeviceCollector\n+Collectors map[string]Collector\n+State *SharedState\n}\nclass framework.Collector {\n+Enabled() bool\n+Setup(*Context)\n+Run(<-chan struct{})\n+Started() bool\n}\nclass framework.SharedState {\n+GetNodeUsage() (*CPUQuantity, *MemoryQuantity)\n+GetPodsUsageByCollector() (map[string]*CPUQuantity, map[string]*MemoryQuantity)\n+GetHostAppUsage() (*CPUQuantity, *MemoryQuantity)\n}\nMetricAdvisor --\x3e framework.Options : "uses"\nMetricAdvisor --\x3e framework.Context : "manages"\nframework.Context --\x3e framework.Collector : "contains"\nframework.Context --\x3e framework.SharedState : "contains"\n')),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Diagram sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/metrics_advisor.go#L1-L136"},"metrics_advisor.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/framework"},"framework"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/metrics_advisor.go#L1-L136"},"metrics_advisor.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/podcpusatisfaction/pod_cpu_satisfaction_collector.go#L1-L295"},"pod_cpu_satisfaction_collector.go"))),(0,n.kt)("h2",{id:"collector-interfaces-and-extension-points"},"Collector Interfaces and Extension Points"),(0,n.kt)("p",null,"The metrics advisor framework provides well-defined interfaces for gathering new metrics from nodes and pods. The core extension mechanism is the Collector interface defining lifecycle methods for all collectors. This interface serves as the foundation for pod-level and device-level metrics collection."),(0,n.kt)("p",null,"Supports two specialized types: PodCollector for pod-specific metrics and DeviceCollector for device-specific metrics. These extend the base Collector interface with additional tailored methods. The framework provides factory functions (CollectorFactory and DeviceFactory) for creating collectors based on configuration."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-mermaid"},"classDiagram\nclass Collector {\n+Enabled() bool\n+Setup(s *Context)\n+Run(stopCh <-chan struct{})\n+Started() bool\n}\nclass PodCollector {\n+PodFilter\n+GetPodMetric(uid, podParentDir string, cs []corev1.ContainerStatus) []metriccache.MetricSample\n}\nclass DeviceCollector {\n+Shutdown()\n+Infos() metriccache.Devices\n+GetNodeMetric() []metriccache.MetricSample\n+GetContainerMetric(containerID, podParentDir string, c *corev1.ContainerStatus) []metriccache.MetricSample\n}\nclass CollectorFactory {\n+Create(opt *Options) Collector\n}\nclass DeviceFactory {\n+Create(opt *Options) DeviceCollector\n}\nCollector <|-- PodCollector\nCollector <|-- DeviceCollector\nCollectorFactory --\x3e Collector : creates\nDeviceFactory --\x3e DeviceCollector : creates\nnote right of Collector\nBase interface for all metrics collectors\nProvides lifecycle management methods\nend\nnote right of PodCollector\nSpecialized collector for pod-level metrics\nImplements PodFilter interface\nend\nnote right of DeviceCollector\nSpecialized collector for device metrics\nProvides device-specific information\nend\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Diagram sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/framework/plugin.go"},"plugin.go"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/framework/plugin.go"},"plugin.go"))),(0,n.kt)("h2",{id:"existing-collector-implementations"},"Existing Collector Implementations"),(0,n.kt)("p",null,"Koordinator includes built-in collectors demonstrating the framework's capabilities for monitoring system resources."),(0,n.kt)("h3",{id:"node-resource-collector"},"Node Resource Collector"),(0,n.kt)("p",null,"Gathers CPU and memory usage metrics from node level, collecting accumulated CPU ticks and memory usage to calculate usage rates over time. Integrates with device collectors for specialized hardware metrics. Uses shared state to update node resource usage for access by other collectors."),(0,n.kt)("h3",{id:"performance-collector"},"Performance Collector"),(0,n.kt)("p",null,"Monitors CPU Performance Indicators (CPI) and Pressure Stall Information (PSI) for containers and pods. Uses perf events for CPI when Libpfm4 is enabled, or alternative methods otherwise. PSI collection monitors CPU, memory, and I/O pressure for insights into resource contention and bottlenecks. Feature-gated for enable/disable based on system capabilities."),(0,n.kt)("h3",{id:"system-resource-collector"},"System Resource Collector"),(0,n.kt)("p",null,"Calculates system-level resource usage: system usage = node usage - pod usage - host app usage. Depends on other collectors for input metrics, demonstrating framework support for collector dependencies. Validates input metric freshness before calculations to ensure accurate derived metrics."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-mermaid"},"sequenceDiagram\nparticipant Collector as NodeResourceCollector\nparticipant StatesInformer as StatesInformer\nparticipant MetricCache as MetricCache\nparticipant DeviceCollector as DeviceCollector\nCollector->>StatesInformer : GetAllPods()\nCollector->>MetricCache : Get(NodeCPUInfoKey)\nCollector->>DeviceCollector : GetNodeMetric()\nCollector->>MetricCache : Appender().Append()\nCollector->>MetricCache : Appender().Commit()\nCollector->>SharedState : UpdateNodeUsage()\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Diagram sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/noderesource/node_resource_collector.go"},"node_resource_collector.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/performance/performance_collector_linux.go"},"performance_collector_linux.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/sysresource/system_resource_collector.go"},"system_resource_collector.go"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/noderesource/node_resource_collector.go"},"node_resource_collector.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/performance/performance_collector_linux.go"},"performance_collector_linux.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/sysresource/system_resource_collector.go"},"system_resource_collector.go"))),(0,n.kt)("h2",{id:"custom-collector-development"},"Custom Collector Development"),(0,n.kt)("p",null,"Developing custom collectors involves implementing the Collector interface and registering with the framework. Follow this standardized pattern:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Implement Lifecycle Methods"),": Enabled, Setup, Run, Started"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"Enabled: Determine activation based on configuration/capabilities"),(0,n.kt)("li",{parentName:"ul"},"Setup: Initialize with shared resources (context, states informer, metric cache)"),(0,n.kt)("li",{parentName:"ul"},"Run: Main collection logic in loop at configurable interval"),(0,n.kt)("li",{parentName:"ul"},"Started: Indicate if collector successfully began"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Follow Dependency Patterns"),": Validate input data freshness and handle errors gracefully")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Use Shared State"),": Coordinate with other collectors and share intermediate results")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Consider Performance"),": Minimize resource consumption, make intervals configurable"))),(0,n.kt)("p",null,"Custom collectors should ensure stability through proper error handling and avoid excessive overhead."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/framework/plugin.go"},"plugin.go")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/collectors/noderesource/node_resource_collector.go"},"node_resource_collector.go"))),(0,n.kt)("h2",{id:"prometheus-integration"},"Prometheus Integration"),(0,n.kt)("p",null,"Koordinator integrates with Prometheus to expose collected metrics through standard endpoints. Integration follows Kubernetes best practices with components exposing metrics via HTTP endpoints scraped by Prometheus. Configuration managed through ",(0,n.kt)("inlineCode",{parentName:"p"},"monitor.yaml")," defining ServiceMonitor resources for Prometheus operator."),(0,n.kt)("p",null,"Metrics registered using Prometheus client libraries and exposed through merged internal and external registries. This allows both detailed debugging metrics and high-level operational metrics with environment-based control. The koordlet exposes metrics through dedicated HTTP server:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/metrics"),": Merged metrics"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/internal/metrics"),": Internal debugging metrics"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"/external/metrics"),": External operational metrics")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-mermaid"},"graph LR\nP[Prometheus Server] --\x3e |scrapes| SM[ServiceMonitor]\nSM --\x3e |targets| K[koordlet]\nSM --\x3e |targets| SC[SLO Controller]\nSM --\x3e |targets| D[Descheduler]\nK --\x3e |exposes| ME[/metrics]\nSC --\x3e |exposes| ME\nD --\x3e |exposes| ME\nME --\x3e |returns| M[Metric Data]\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Diagram sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/prometheus/monitor.yaml"},"monitor.yaml")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/cmd/koordlet/main.go"},"main.go"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/config/prometheus/monitor.yaml"},"monitor.yaml")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metrics/metrics.go"},"metrics.go"))),(0,n.kt)("h2",{id:"configuration-and-management"},"Configuration and Management"),(0,n.kt)("p",null,"The metrics collection system is highly configurable with settings controlling collection intervals, enabled collectors, and operational parameters. Managed through MetricsAdvisorConfig structure."),(0,n.kt)("p",null,"Key parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"CollectResUsedInterval"),": Resource usage metric collection interval"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"CollectSysMetricOutdatedInterval"),": System metric data validity period"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"CollectNodeCPUInfoInterval"),": Node CPU information collection interval"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"CollectNodeStorageInfoInterval"),": Node storage information collection interval"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"CPICollectorInterval/TimeWindow"),": CPI metric collection settings"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"PSICollectorInterval"),": PSI metric collection interval"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"ColdPageCollectorInterval"),": Cold page collection interval"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"EnablePageCacheCollector"),": Enable page cache collection flag"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"EnableResctrlCollector"),": Enable resctrl collection flag")),(0,n.kt)("p",null,"These options allow fine-tuning based on requirements, balancing monitoring granularity with system performance. Feature gates provide additional control over collector enablement based on capabilities."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-mermaid"},"classDiagram\nclass MetricsAdvisorConfig {\n+duration CollectResUsedInterval\n+duration CollectSysMetricOutdatedInterval\n+duration CollectNodeCPUInfoInterval\n+duration CollectNodeStorageInfoInterval\n+duration CPICollectorInterval\n+duration PSICollectorInterval\n+duration CPICollectorTimeWindow\n+duration ColdPageCollectorInterval\n+duration ResctrlCollectorInterval\n+bool EnablePageCacheCollector\n+bool EnableResctrlCollector\n}\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Diagram sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/framework/config.go#L1-L72"},"pkg/koordlet/metricsadvisor/framework/config.go"))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Section sources")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/koordinator-sh/koordinator/tree/main/pkg/koordlet/metricsadvisor/framework/config.go#L1-L72"},"pkg/koordlet/metricsadvisor/framework/config.go"))),(0,n.kt)("h2",{id:"conclusion"},"Conclusion"),(0,n.kt)("p",null,"Koordinator's metrics collection framework provides a robust and extensible system for monitoring node/pod resource usage, performance characteristics, and system health. The plugin-based architecture enables comprehensive monitoring through built-in collectors while providing clear extension points for custom metrics collection. Prometheus integration ensures collected metrics are accessible to standard monitoring and alerting systems, enabling deep insights into cluster performance and resource utilization. By following patterns from existing collectors and leveraging the framework's shared state and dependency management, developers can create custom collectors that enhance Koordinator's monitoring capabilities for specific use cases and hardware configurations."))}p.isMDXComponent=!0}}]);