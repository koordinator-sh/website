"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[2355],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),m=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(n),u=o,g=c["".concat(s,".").concat(u)]||c[u]||d[u]||r;return n?a.createElement(g,i(i({ref:t},p),{},{components:n})):a.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:o,i[1]=l;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77010:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var a=n(87462),o=(n(67294),n(3905));const r={},i="Eviction Strategy base on Memory Usage",l={unversionedId:"user-manuals/memory-evict",id:"version-v1.6/user-manuals/memory-evict",title:"Eviction Strategy base on Memory Usage",description:"Introduction",source:"@site/versioned_docs/version-v1.6/user-manuals/memory-evict.md",sourceDirName:"user-manuals",slug:"/user-manuals/memory-evict",permalink:"/docs/v1.6/user-manuals/memory-evict",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/user-manuals/memory-evict.md",tags:[],version:"v1.6",lastUpdatedBy:"wangjianyu",lastUpdatedAt:1740707377,formattedLastUpdatedAt:"Feb 28, 2025",frontMatter:{},sidebar:"docs",previous:{title:"Eviction Strategy base on CPU Satisfaction",permalink:"/docs/v1.6/user-manuals/cpu-evict"},next:{title:"SLO Configuration",permalink:"/docs/v1.6/user-manuals/slo-config"}},s={},m=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisite",id:"prerequisite",level:3},{value:"Use Eviction Strategy base on Memory Usage",id:"use-eviction-strategy-base-on-memory-usage",level:2}],p={toc:m},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"eviction-strategy-base-on-memory-usage"},"Eviction Strategy base on Memory Usage"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"Koordinator supports the dynamic overcommitment from idle resources on node to low-priority\nPods as Batch priority. In co-location scenarios, the actual memory resource usage of\nnodes is constantly changing. For incompressible resources such as memory, high resource\nusage of node may cause OOM, which results in the high-priority Pod got killed. Koordinator\nprovides an eviction strategy based on the memory usage node. ",(0,o.kt)("inlineCode",{parentName:"p"},"Koordlet")," will continuously\ndetect the memory usage of node (Total-Available) in second-level granularity.\nWhen the resource memory usage of node is high, it will evict low-priority BE Pods to\nensure the QoS of high-priority pods until the memory usage of node reduces below to the\nthreshold (evictThreshold). During the eviction process, Pods with lower priority(Pod.Spec.Priority)\nwill be selected first, and if the priority is the same, Pods which consume more memory will be\nevicted first."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"image",src:n(27413).Z,width:"321",height:"221"})),(0,o.kt)("h3",{id:"prerequisite"},"Prerequisite"),(0,o.kt)("p",null,"Please make sure Koordinator components are correctly installed in your cluster. If not, please refer to\n",(0,o.kt)("a",{parentName:"p",href:"/docs/installation"},"Installation"),"."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Component"),(0,o.kt)("th",{parentName:"tr",align:null},"Version Requirement"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Kubernetes"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2265v1.18")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"koordinator"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2265v0.3.0")))),(0,o.kt)("p",null,"The eviction strategy is provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"Koordlet"),", which is disabled by default in feature-gate.\nPlease make sure the ",(0,o.kt)("inlineCode",{parentName:"p"},"BEMemoryEvict=true")," field has been added in the ",(0,o.kt)("inlineCode",{parentName:"p"},"-feature-gates")," arguments of ",(0,o.kt)("inlineCode",{parentName:"p"},"Koordlet"),"\nas the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/koordinator-sh/charts/blob/main/versions/v1.2.0/templates/koordlet.yaml#L36"},"example"),"\u3002"),(0,o.kt)("h2",{id:"use-eviction-strategy-base-on-memory-usage"},"Use Eviction Strategy base on Memory Usage"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a configmap.yaml file based on the following ConfigMap content:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'#ConfigMap slo-controller-config example\u3002\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: slo-controller-config # name should be set as the configuration of koord-manager, e.g. ack-slo-config \n  namespace: koordinator-system # namespace should be set as the configuration of installation, e.g. kube-system\ndata:\n  # enable the eviction strategy base on Memory Usage\n  resource-threshold-config: |\n    {\n      "clusterStrategy": {\n        "enable": true,\n        "memoryEvictThresholdPercent": 70\n      }\n    }\n')),(0,o.kt)("table",{parentName:"li"},(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:"left"},"Configuration item"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Valid values"),(0,o.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"enable")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Boolean"),(0,o.kt)("td",{parentName:"tr",align:"left"},"true; false"),(0,o.kt)("td",{parentName:"tr",align:"left"},"true\uff1aenable the eviction.; false\uff08default\uff09\uff1adisable the eviction.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:"left"},(0,o.kt)("inlineCode",{parentName:"td"},"memoryEvictThresholdPercent")),(0,o.kt)("td",{parentName:"tr",align:"left"},"Int"),(0,o.kt)("td",{parentName:"tr",align:"left"},"0~100"),(0,o.kt)("td",{parentName:"tr",align:"left"},"eviction threshold percent of node memory usage, default is 70."))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check whether a ConfigMap named ",(0,o.kt)("inlineCode",{parentName:"p"},"slo-controller-config")," exists in the ",(0,o.kt)("inlineCode",{parentName:"p"},"koordinator-system")," namespace."))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If a ConfigMap named  ",(0,o.kt)("inlineCode",{parentName:"p"},"slo-controller-config"),"  exists, we commend that you run the kubectl patch command to update the ConfigMap. This avoids changing other settings in the ConfigMap."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'kubectl patch cm -n koordinator-system slo-controller-config --patch "$(cat configmap.yaml)"\n'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If no ConfigMap named ",(0,o.kt)("inlineCode",{parentName:"p"},"slo-controller-config"),"  exists, run the kubectl patch command to create a ConfigMap named ack-slo-config:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f configmap.yaml\n")))),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a file named be-pod-demo.yaml based on the following YAML content:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Pod\nmetadata:\n  name: be-pod-demo\n  labels:\n    koordinator.sh/qosClass: 'BE' # set Pod QoS as BE\nspec:\n  containers:\n    - args:\n        - '-c'\n        - '1'\n        - '--vm'\n        - '1'\n      command:\n        - stress\n      image: polinux/stress\n      imagePullPolicy: Always\n      name: stress\n  restartPolicy: Always\n  schedulerName: default-scheduler\n  # priorityClassName is required when ColocationProfile enabled (default).\n  priorityClassName: koord-batch\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the following command to deploy the be-pod-demo pod in the cluster:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f be-pod-demo.yaml\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the following command to check the be-pod-demo pod in Running state:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl get pod be-pod-demo\nNAME          READY   STATUS    RESTARTS   AGE\nbe-pod-demo   1/1     Running   0          7s\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the following command through ",(0,o.kt)("a",{parentName:"p",href:"https://linux.die.net/man/1/stress"},"stress tool"),"\nmake sure the memory usage of node is above the threshold config, and the argument ",(0,o.kt)("inlineCode",{parentName:"p"},"--vm-bytes"),"\nmeans the process will consume 10GB memory, this should be adjusted according to the node capacity."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ stress --cpu 1 --vm 1 --vm-bytes 10G --vm-keep\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Check the running state of be-pod-demo, then you can find the be-pod-demo pod is not exist,\nand the eviction information can be found in events."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ kubectl get pod be-pod-demo\nError from server (NotFound): pods "be-pod-demo" not found\n\n$ kubectl get event\nLAST SEEN   TYPE      REASON            OBJECT              MESSAGE\n46s         Normal    Killing           pod/be-pod-demo     Stopping container stress\n48s         Warning   evictPodSuccess   ${your-pod-object}     evict Pod:be-pod-demo, reason: EvictPodByNodeMemoryUsage, message: killAndEvictBEPods for node(${your-node-id}), need to release memory: 8077889699\n')))))}d.isMDXComponent=!0},27413:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/memory-evict-ca2e01d38aa26c5b97f014fdc5ccb1c9.svg"}}]);