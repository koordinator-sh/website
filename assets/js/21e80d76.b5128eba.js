"use strict";(self.webpackChunkkoordinator_sh=self.webpackChunkkoordinator_sh||[]).push([[5794],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=u(t),p=a,h=s["".concat(c,".").concat(p)]||s[p]||d[p]||o;return t?r.createElement(h,i(i({ref:n},m),{},{components:t})):r.createElement(h,i({ref:n},m))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},74595:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(87462),a=(t(67294),t(3905));const o={},i="Device Scheduling - Cambricon MLU",l={unversionedId:"user-manuals/device-scheduling-cambricon-mlu",id:"user-manuals/device-scheduling-cambricon-mlu",title:"Device Scheduling - Cambricon MLU",description:"Background",source:"@site/docs/user-manuals/device-scheduling-cambricon-mlu.md",sourceDirName:"user-manuals",slug:"/user-manuals/device-scheduling-cambricon-mlu",permalink:"/docs/next/user-manuals/device-scheduling-cambricon-mlu",draft:!1,editUrl:"https://github.com/koordinator-sh/koordinator.sh/edit/main/docs/user-manuals/device-scheduling-cambricon-mlu.md",tags:[],version:"current",lastUpdatedBy:"Zach Zhu",lastUpdatedAt:1761294207,formattedLastUpdatedAt:"Oct 24, 2025",frontMatter:{},sidebar:"docs",previous:{title:"Device Scheduling - Huawei Ascend NPU",permalink:"/docs/next/user-manuals/device-scheduling-ascend-npu"},next:{title:"Enhanced NodeResourceFit",permalink:"/docs/next/user-manuals/node-resource-fit-plus-scoring"}},c={},u=[{value:"Background",id:"background",level:2},{value:"Usage",id:"usage",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Steps to Use",id:"steps-to-use",level:3}],m={toc:u},s="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(s,(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"device-scheduling---cambricon-mlu"},"Device Scheduling - Cambricon MLU"),(0,a.kt)("h2",{id:"background"},"Background"),(0,a.kt)("p",null,"Currently, Koordinator supports the use of Cambricon cards in K8s. Based on the ",(0,a.kt)("inlineCode",{parentName:"p"},"koord-device-daemon")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"koordlet")," components, heterogeneous GPU resources are reported, and heterogeneous card information is aggregated into the ",(0,a.kt)("inlineCode",{parentName:"p"},"Device")," object for topology scheduling by the scheduler."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"The use of Cambricon cards requires prior installation and configuration of the following components:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cambricon Driver"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Cambricon/cambricon-k8s-device-plugin"},"Cambricon Device Plugin (enable virtualization parameter configuration)"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-startup",metastring:"parameters",parameters:!0},'args:\n  - --mode=dynamic-smlu # device plugin mode: default, dynamic-smlu, env-share, mim, topology-aware\n  - --virtualization-num=1 # virtualization number for each MLU, used only in env-share mode, set to 110 to support multi cards per container in env-share mode\n  - --mlulink-policy=best-effort # MLULink topology policy: best-effort, guaranteed or restricted, used only in topology-aware mode\n  - --cnmon-path=/usr/bin/cnmon # host machine cnmon path, must be absolute path. comment out this line to avoid mounting cnmon\n  - --log-level=info # log level: trace/debug/info/warn/error/fatal/panic" default:"info"\n  - --min-dsmlu-unit=256 # minimum unit for dsmu, used only in dynamic-smlu mode" default:"0" env:"MIN-DSMLU-UNIT"\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Koordinator-related components (koordinator >= v1.7.0)",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"You need to set ",(0,a.kt)("inlineCode",{parentName:"li"},"DevicePluginAdaption=true")," into the chart\u2019s ",(0,a.kt)("inlineCode",{parentName:"li"},"scheduler.featureGates")," value to enable the feature gate required for this functionality.")))),(0,a.kt)("h3",{id:"steps-to-use"},"Steps to Use"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Confirm that the Cambricon card has been successfully recognized by the ",(0,a.kt)("inlineCode",{parentName:"li"},"Device"),". An example is shown below. You can view the ",(0,a.kt)("inlineCode",{parentName:"li"},"Device")," resource using: ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl get device <node-name> -o yaml"),".")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Note"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The label ",(0,a.kt)("inlineCode",{parentName:"li"},"node.koordinator.sh/gpu-vendor")," should have the value ",(0,a.kt)("inlineCode",{parentName:"li"},"cambricon"))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: scheduling.koordinator.sh/v1alpha1\nkind: Device\nmetadata:\n  labels:\n    node.koordinator.sh/gpu-model: MLU-370 # The model of the Cambricon card.\n    node.koordinator.sh/gpu-vendor: cambricon # The vendor of the card.\n  name: node-1\nspec:\n  devices:\n    - health: true\n      id: 89033010-2354-0000-0000-000000000000 # The UUID of the Cambricon card (mocked value).\n      minor: 0 # The minor number of the Cambricon card.\n      resources:\n        koordinator.sh/gpu-core: "100" # The total compute capacity of the Cambricon card in percentage.\n        koordinator.sh/gpu-memory: 24Gi # The total GPU memory of the Cambricon card.\n        koordinator.sh/gpu-memory-ratio: "100" # The total GPU memory ratio in percentage.\n      topology:\n        busID: 0000:47:00.0 # The PCI bus ID.\n        nodeID: 3 # The NUMA node ID.\n        pcieID: pci0000:3a # The PCI root ID.\n        socketID: -1\n      type: gpu\n      conditions:\n        - lastTransitionTime: "2025-04-25T10:00:00Z"\n          message: device is healthy\n          reason: DeviceHealthy\n          status: "True"\n          type: Healthy\nstatus: {}\n')),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Verify that the Cambricon card resource information has been correctly registered on the Cambricon node. You can run ",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl get node <node-name> -o yaml")," to check the node.status.allocatable and node.status.capacity resources.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: Node\nmetadata:\n  name: node-1\n  ...\nstatus:\n    allocatable:\n      ...\n      koordinator.sh/gpu-core: "100" # Report by koordinator\n      koordinator.sh/gpu-memory: 24Gi # Report by koordinator\n      koordinator.sh/gpu-memory-ratio: "100" # Report by koordinator\n      cambricon.com/mlu.smlu.vcore: "100" # Report by cambricon device plugin\n      cambricon.com/mlu.smlu.vmemory: "96" # Report by cambricon device plugin\n    capacity:\n      ...\n      koordinator.sh/gpu-core: "100" # Report by koordinator\n      koordinator.sh/gpu-memory: 24Gi # Report by koordinator\n      koordinator.sh/gpu-memory-ratio: "100" # Report by koordinator\n      cambricon.com/mlu.smlu.vcore: "100" # Report by cambricon device plugin\n      cambricon.com/mlu.smlu.vmemory: "96" # Report by cambricon device plugin\n')),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Create a Pod to request the use of Cambricon cards. The example below shows a virtual card scenario. Cambricon ",(0,a.kt)("strong",{parentName:"li"},"does not support multi-card virtualization"),".")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Notes"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The image here uses a basic Ubuntu image; users can select an appropriate image based on actual needs."),(0,a.kt)("li",{parentName:"ul"},"Both ",(0,a.kt)("inlineCode",{parentName:"li"},"resources.limits")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"resources.requests")," must be configured with additional resources.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Virtual card scenario"),": Taking MLU-370 in virtualization mode as an example:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"koordinator.sh/gpu.shared"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Apply for virtual card \u2192 fill in 1."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"koordinator.sh/gpu-core"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Fill in the exact computing power required, represented as a percentage."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cambricon.com/mlu.smlu.vcore"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Fill in the exact computing power required, represented as a percentage."))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"cambricon.com/mlu.smlu.vmemory"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Fill in the number of memory slices required. For example, for 1GB:",(0,a.kt)("br",{parentName:"li"}),"If each slice = 256Mi (configured in Cambricon Device Plugin via ",(0,a.kt)("inlineCode",{parentName:"li"},"min-dsmlu-unit"),"), formula: ",(0,a.kt)("inlineCode",{parentName:"li"},"slice_count = 1GB / 256Mi"),".")))))))))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"partial-card","partial-card":!0},'apiVersion: v1\nkind: Pod\nmetadata:\n  labels:\n    app: demo-sleep\n  name: test-cambricon-partial\n  namespace: default\nspec:\n  containers:\n  - command:\n    - sleep\n    - infinity\n    image: ubuntu:18.04\n    imagePullPolicy: IfNotPresent\n    name: demo-sleep\n    resources:\n      limits:\n        cpu: "32"\n        memory: 64Gi\n        koordinator.sh/gpu.shared: "1"\n        koordinator.sh/gpu-memory: "1Gi"\n        koordinator.sh/gpu-core: "10"\n        cambricon.com/mlu.smlu.vcore: "10" # percentage\n        cambricon.com/mlu.smlu.vmemory: "4" # slice counts, actual allocated memory: 4*256Mi=1Gi\n      requests:\n        cpu: "32"\n        memory: 64Gi\n        koordinator.sh/gpu.shared: "1"\n        koordinator.sh/gpu-memory: "1Gi"\n        koordinator.sh/gpu-core: "10"\n        cambricon.com/mlu.smlu.vcore: "10"\n        cambricon.com/mlu.smlu.vmemory: "4" \n')),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Enter the container (",(0,a.kt)("inlineCode",{parentName:"li"},"kubectl exec -it {pod-name} -- bash"),"), and run: ",(0,a.kt)("inlineCode",{parentName:"li"},"ls /dev/cambricon*")," inside the container to check the devices. If it outputs normally, it indicates that the card has been successfully allocated to the Pod.")))}d.isMDXComponent=!0}}]);